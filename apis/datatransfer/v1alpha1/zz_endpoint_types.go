/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AltNamesInitParameters struct {

	// Name of the endpoint.
	FromName *string `json:"fromName,omitempty" tf:"from_name,omitempty"`

	// Name of the endpoint.
	ToName *string `json:"toName,omitempty" tf:"to_name,omitempty"`
}

type AltNamesObservation struct {

	// Name of the endpoint.
	FromName *string `json:"fromName,omitempty" tf:"from_name,omitempty"`

	// Name of the endpoint.
	ToName *string `json:"toName,omitempty" tf:"to_name,omitempty"`
}

type AltNamesParameters struct {

	// Name of the endpoint.
	// +kubebuilder:validation:Optional
	FromName *string `json:"fromName,omitempty" tf:"from_name,omitempty"`

	// Name of the endpoint.
	// +kubebuilder:validation:Optional
	ToName *string `json:"toName,omitempty" tf:"to_name,omitempty"`
}

type ClickhouseSourceInitParameters struct {

	// Connection settings. The structure is documented below.
	Connection []ConnectionInitParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// List of tables which will not be transfered, formatted as schemaname.tablename.
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	// List of tables to transfer, formatted as schemaname.tablename. If omitted or an empty list is specified, all tables will be transferred.
	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`
}

type ClickhouseSourceObservation struct {

	// Connection settings. The structure is documented below.
	Connection []ConnectionObservation `json:"connection,omitempty" tf:"connection,omitempty"`

	// List of tables which will not be transfered, formatted as schemaname.tablename.
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	// List of tables to transfer, formatted as schemaname.tablename. If omitted or an empty list is specified, all tables will be transferred.
	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type ClickhouseSourceParameters struct {

	// Connection settings. The structure is documented below.
	// +kubebuilder:validation:Optional
	Connection []ConnectionParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// List of tables which will not be transfered, formatted as schemaname.tablename.
	// +kubebuilder:validation:Optional
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	// List of tables to transfer, formatted as schemaname.tablename. If omitted or an empty list is specified, all tables will be transferred.
	// +kubebuilder:validation:Optional
	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type ClickhouseTargetConnectionInitParameters struct {

	// Connection options. The structure is documented below.
	ConnectionOptions []ConnectionConnectionOptionsInitParameters `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type ClickhouseTargetConnectionObservation struct {

	// Connection options. The structure is documented below.
	ConnectionOptions []ConnectionConnectionOptionsObservation `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type ClickhouseTargetConnectionParameters struct {

	// Connection options. The structure is documented below.
	// +kubebuilder:validation:Optional
	ConnectionOptions []ConnectionConnectionOptionsParameters `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type ClickhouseTargetInitParameters struct {

	// Table renaming rules. The structure is documented below.
	AltNames []AltNamesInitParameters `json:"altNames,omitempty" tf:"alt_names,omitempty"`

	// How to clean collections when activating the transfer. One of "DISABLED", "DROP" or "TRUNCATE".
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// Name of the ClickHouse cluster. For managed ClickHouse clusters defaults to managed cluster ID.
	ClickhouseClusterName *string `json:"clickhouseClusterName,omitempty" tf:"clickhouse_cluster_name,omitempty"`

	// Connection settings. The structure is documented below.
	Connection []ClickhouseTargetConnectionInitParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Shard selection rules for the data being transferred. The structure is documented below.
	Sharding []ShardingInitParameters `json:"sharding,omitempty" tf:"sharding,omitempty"`
}

type ClickhouseTargetObservation struct {

	// Table renaming rules. The structure is documented below.
	AltNames []AltNamesObservation `json:"altNames,omitempty" tf:"alt_names,omitempty"`

	// How to clean collections when activating the transfer. One of "DISABLED", "DROP" or "TRUNCATE".
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// Name of the ClickHouse cluster. For managed ClickHouse clusters defaults to managed cluster ID.
	ClickhouseClusterName *string `json:"clickhouseClusterName,omitempty" tf:"clickhouse_cluster_name,omitempty"`

	// Connection settings. The structure is documented below.
	Connection []ClickhouseTargetConnectionObservation `json:"connection,omitempty" tf:"connection,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Shard selection rules for the data being transferred. The structure is documented below.
	Sharding []ShardingObservation `json:"sharding,omitempty" tf:"sharding,omitempty"`

	// Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type ClickhouseTargetParameters struct {

	// Table renaming rules. The structure is documented below.
	// +kubebuilder:validation:Optional
	AltNames []AltNamesParameters `json:"altNames,omitempty" tf:"alt_names,omitempty"`

	// How to clean collections when activating the transfer. One of "DISABLED", "DROP" or "TRUNCATE".
	// +kubebuilder:validation:Optional
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// Name of the ClickHouse cluster. For managed ClickHouse clusters defaults to managed cluster ID.
	// +kubebuilder:validation:Optional
	ClickhouseClusterName *string `json:"clickhouseClusterName,omitempty" tf:"clickhouse_cluster_name,omitempty"`

	// Connection settings. The structure is documented below.
	// +kubebuilder:validation:Optional
	Connection []ClickhouseTargetConnectionParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Shard selection rules for the data being transferred. The structure is documented below.
	// +kubebuilder:validation:Optional
	Sharding []ShardingParameters `json:"sharding,omitempty" tf:"sharding,omitempty"`

	// Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type CollectionsInitParameters struct {

	// Collection name.
	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	// Database name.
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`
}

type CollectionsObservation struct {

	// Collection name.
	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	// Database name.
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`
}

type CollectionsParameters struct {

	// Collection name.
	// +kubebuilder:validation:Optional
	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	// Database name.
	// +kubebuilder:validation:Optional
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`
}

type ColumnValueHashInitParameters struct {

	// The name of the column to calculate hash from.
	ColumnName *string `json:"columnName,omitempty" tf:"column_name,omitempty"`
}

type ColumnValueHashObservation struct {

	// The name of the column to calculate hash from.
	ColumnName *string `json:"columnName,omitempty" tf:"column_name,omitempty"`
}

type ColumnValueHashParameters struct {

	// The name of the column to calculate hash from.
	// +kubebuilder:validation:Optional
	ColumnName *string `json:"columnName,omitempty" tf:"column_name,omitempty"`
}

type ConnectionConnectionOptionsInitParameters struct {

	// Name of the database to transfer.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Identifier of the Managed PostgreSQL cluster.
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []ConnectionOptionsOnPremiseInitParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []ConnectionOptionsPasswordInitParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type ConnectionConnectionOptionsObservation struct {

	// Name of the database to transfer.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Identifier of the Managed PostgreSQL cluster.
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []ConnectionOptionsOnPremiseObservation `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []ConnectionOptionsPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type ConnectionConnectionOptionsOnPremiseInitParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Replica set name.
	ReplicaSet *string `json:"replicaSet,omitempty" tf:"replica_set,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []ConnectionOptionsOnPremiseTLSModeInitParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type ConnectionConnectionOptionsOnPremiseObservation struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Replica set name.
	ReplicaSet *string `json:"replicaSet,omitempty" tf:"replica_set,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []ConnectionOptionsOnPremiseTLSModeObservation `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type ConnectionConnectionOptionsOnPremiseParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Replica set name.
	// +kubebuilder:validation:Optional
	ReplicaSet *string `json:"replicaSet,omitempty" tf:"replica_set,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	TLSMode []ConnectionOptionsOnPremiseTLSModeParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type ConnectionConnectionOptionsOnPremiseTLSModeInitParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []ConnectionOptionsOnPremiseTLSModeDisabledInitParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []ConnectionOptionsOnPremiseTLSModeEnabledInitParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ConnectionConnectionOptionsOnPremiseTLSModeObservation struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []ConnectionOptionsOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []ConnectionOptionsOnPremiseTLSModeEnabledObservation `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ConnectionConnectionOptionsOnPremiseTLSModeParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	// +kubebuilder:validation:Optional
	Disabled []ConnectionOptionsOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	Enabled []ConnectionOptionsOnPremiseTLSModeEnabledParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ConnectionConnectionOptionsParameters struct {

	// Name of the database to transfer.
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Identifier of the Managed PostgreSQL cluster.
	// +kubebuilder:validation:Optional
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	// +kubebuilder:validation:Optional
	OnPremise []ConnectionOptionsOnPremiseParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	// +kubebuilder:validation:Optional
	Password []ConnectionOptionsPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type ConnectionConnectionOptionsPasswordInitParameters struct {
}

type ConnectionConnectionOptionsPasswordObservation struct {
}

type ConnectionConnectionOptionsPasswordParameters struct {

	// +kubebuilder:validation:Optional
	RawSecretRef *v1.SecretKeySelector `json:"rawSecretRef,omitempty" tf:"-"`
}

type ConnectionInitParameters struct {

	// Connection options. The structure is documented below.
	ConnectionOptions []ConnectionOptionsInitParameters `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type ConnectionObservation struct {

	// Connection options. The structure is documented below.
	ConnectionOptions []ConnectionOptionsObservation `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type ConnectionOnPremiseInitParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []ConnectionOnPremiseTLSModeInitParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type ConnectionOnPremiseObservation struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []ConnectionOnPremiseTLSModeObservation `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type ConnectionOnPremiseParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	TLSMode []ConnectionOnPremiseTLSModeParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type ConnectionOnPremiseTLSModeDisabledInitParameters struct {
}

type ConnectionOnPremiseTLSModeDisabledObservation struct {
}

type ConnectionOnPremiseTLSModeDisabledParameters struct {
}

type ConnectionOnPremiseTLSModeEnabledInitParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type ConnectionOnPremiseTLSModeEnabledObservation struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type ConnectionOnPremiseTLSModeEnabledParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type ConnectionOnPremiseTLSModeInitParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []ConnectionOnPremiseTLSModeDisabledInitParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []ConnectionOnPremiseTLSModeEnabledInitParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ConnectionOnPremiseTLSModeObservation struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []ConnectionOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []ConnectionOnPremiseTLSModeEnabledObservation `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ConnectionOnPremiseTLSModeParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	// +kubebuilder:validation:Optional
	Disabled []ConnectionOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	Enabled []ConnectionOnPremiseTLSModeEnabledParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ConnectionOptionsInitParameters struct {

	// Name of the database to transfer.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Identifier of the Managed PostgreSQL cluster.
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []OnPremiseInitParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []PasswordInitParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type ConnectionOptionsObservation struct {

	// Name of the database to transfer.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Identifier of the Managed PostgreSQL cluster.
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []OnPremiseObservation `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []PasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type ConnectionOptionsOnPremiseInitParameters struct {

	// TCP port number for the HTTP interface of the ClickHouse server.
	HTTPPort *float64 `json:"httpPort,omitempty" tf:"http_port,omitempty"`

	// TCP port number for the native interface of the ClickHouse server.
	NativePort *float64 `json:"nativePort,omitempty" tf:"native_port,omitempty"`

	// The list of ClickHouse shards. The structure is documented below.
	Shards []OnPremiseShardsInitParameters `json:"shards,omitempty" tf:"shards,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []OnPremiseTLSModeInitParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type ConnectionOptionsOnPremiseObservation struct {

	// TCP port number for the HTTP interface of the ClickHouse server.
	HTTPPort *float64 `json:"httpPort,omitempty" tf:"http_port,omitempty"`

	// TCP port number for the native interface of the ClickHouse server.
	NativePort *float64 `json:"nativePort,omitempty" tf:"native_port,omitempty"`

	// The list of ClickHouse shards. The structure is documented below.
	Shards []OnPremiseShardsObservation `json:"shards,omitempty" tf:"shards,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []OnPremiseTLSModeObservation `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type ConnectionOptionsOnPremiseParameters struct {

	// TCP port number for the HTTP interface of the ClickHouse server.
	// +kubebuilder:validation:Optional
	HTTPPort *float64 `json:"httpPort,omitempty" tf:"http_port,omitempty"`

	// TCP port number for the native interface of the ClickHouse server.
	// +kubebuilder:validation:Optional
	NativePort *float64 `json:"nativePort,omitempty" tf:"native_port,omitempty"`

	// The list of ClickHouse shards. The structure is documented below.
	// +kubebuilder:validation:Optional
	Shards []OnPremiseShardsParameters `json:"shards,omitempty" tf:"shards,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	TLSMode []OnPremiseTLSModeParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type ConnectionOptionsOnPremiseTLSModeDisabledInitParameters struct {
}

type ConnectionOptionsOnPremiseTLSModeDisabledObservation struct {
}

type ConnectionOptionsOnPremiseTLSModeDisabledParameters struct {
}

type ConnectionOptionsOnPremiseTLSModeEnabledInitParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type ConnectionOptionsOnPremiseTLSModeEnabledObservation struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type ConnectionOptionsOnPremiseTLSModeEnabledParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type ConnectionOptionsOnPremiseTLSModeInitParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []OnPremiseTLSModeDisabledInitParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []OnPremiseTLSModeEnabledInitParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ConnectionOptionsOnPremiseTLSModeObservation struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []OnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []OnPremiseTLSModeEnabledObservation `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ConnectionOptionsOnPremiseTLSModeParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	// +kubebuilder:validation:Optional
	Disabled []OnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	Enabled []OnPremiseTLSModeEnabledParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ConnectionOptionsParameters struct {

	// Name of the database to transfer.
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Identifier of the Managed PostgreSQL cluster.
	// +kubebuilder:validation:Optional
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	// +kubebuilder:validation:Optional
	OnPremise []OnPremiseParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	// +kubebuilder:validation:Optional
	Password []PasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type ConnectionOptionsPasswordInitParameters struct {
}

type ConnectionOptionsPasswordObservation struct {
}

type ConnectionOptionsPasswordParameters struct {

	// +kubebuilder:validation:Optional
	RawSecretRef *v1.SecretKeySelector `json:"rawSecretRef,omitempty" tf:"-"`
}

type ConnectionParameters struct {

	// Connection options. The structure is documented below.
	// +kubebuilder:validation:Optional
	ConnectionOptions []ConnectionOptionsParameters `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type DisabledInitParameters struct {
}

type DisabledObservation struct {
}

type DisabledParameters struct {
}

type EnabledInitParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type EnabledObservation struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type EnabledParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type EndpointInitParameters struct {

	// Arbitrary description text for the endpoint.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A set of key/value label pairs to assign to the Data Transfer endpoint.
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Name of the endpoint.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Settings for the endpoint. The structure is documented below.
	Settings []SettingsInitParameters `json:"settings,omitempty" tf:"settings,omitempty"`
}

type EndpointObservation struct {

	// Arbitrary description text for the endpoint.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the folder to create the endpoint in. If it is not provided, the default provider folder is used.
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// (Computed) Identifier of a new Data Transfer endpoint.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A set of key/value label pairs to assign to the Data Transfer endpoint.
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Name of the endpoint.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Settings for the endpoint. The structure is documented below.
	Settings []SettingsObservation `json:"settings,omitempty" tf:"settings,omitempty"`
}

type EndpointParameters struct {

	// Arbitrary description text for the endpoint.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the folder to create the endpoint in. If it is not provided, the default provider folder is used.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/resourcemanager/v1alpha1.Folder
	// +kubebuilder:validation:Optional
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// A set of key/value label pairs to assign to the Data Transfer endpoint.
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Name of the endpoint.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Settings for the endpoint. The structure is documented below.
	// +kubebuilder:validation:Optional
	Settings []SettingsParameters `json:"settings,omitempty" tf:"settings,omitempty"`
}

type ExcludedCollectionsInitParameters struct {

	// Collection name.
	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	// Database name.
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`
}

type ExcludedCollectionsObservation struct {

	// Collection name.
	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	// Database name.
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`
}

type ExcludedCollectionsParameters struct {

	// Collection name.
	// +kubebuilder:validation:Optional
	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	// Database name.
	// +kubebuilder:validation:Optional
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`
}

type MongoSourceConnectionConnectionOptionsInitParameters struct {

	// Name of the database associated with the credentials.
	AuthSource *string `json:"authSource,omitempty" tf:"auth_source,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []ConnectionConnectionOptionsOnPremiseInitParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []ConnectionConnectionOptionsPasswordInitParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type MongoSourceConnectionConnectionOptionsObservation struct {

	// Name of the database associated with the credentials.
	AuthSource *string `json:"authSource,omitempty" tf:"auth_source,omitempty"`

	// Identifier of the Managed PostgreSQL cluster.
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []ConnectionConnectionOptionsOnPremiseObservation `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []ConnectionConnectionOptionsPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type MongoSourceConnectionConnectionOptionsParameters struct {

	// Name of the database associated with the credentials.
	// +kubebuilder:validation:Optional
	AuthSource *string `json:"authSource,omitempty" tf:"auth_source,omitempty"`

	// Identifier of the Managed PostgreSQL cluster.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.MongodbCluster
	// +kubebuilder:validation:Optional
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Reference to a MongodbCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDRef *v1.Reference `json:"mdbClusterIdRef,omitempty" tf:"-"`

	// Selector for a MongodbCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDSelector *v1.Selector `json:"mdbClusterIdSelector,omitempty" tf:"-"`

	// Connection settings of the on-premise PostgreSQL server.
	// +kubebuilder:validation:Optional
	OnPremise []ConnectionConnectionOptionsOnPremiseParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	// +kubebuilder:validation:Optional
	Password []ConnectionConnectionOptionsPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type MongoSourceConnectionInitParameters struct {

	// Connection options. The structure is documented below.
	ConnectionOptions []MongoSourceConnectionConnectionOptionsInitParameters `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type MongoSourceConnectionObservation struct {

	// Connection options. The structure is documented below.
	ConnectionOptions []MongoSourceConnectionConnectionOptionsObservation `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type MongoSourceConnectionParameters struct {

	// Connection options. The structure is documented below.
	// +kubebuilder:validation:Optional
	ConnectionOptions []MongoSourceConnectionConnectionOptionsParameters `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type MongoSourceInitParameters struct {

	// The list of the MongoDB collections that should be transferred. If omitted, all available collections will be transferred. The structure of the list item is documented below.
	Collections []CollectionsInitParameters `json:"collections,omitempty" tf:"collections,omitempty"`

	// Connection settings. The structure is documented below.
	Connection []MongoSourceConnectionInitParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// The list of the MongoDB collections that should not be transferred.
	ExcludedCollections []ExcludedCollectionsInitParameters `json:"excludedCollections,omitempty" tf:"excluded_collections,omitempty"`

	// whether the secondary server should be preferred to the primary when copying data.
	SecondaryPreferredMode *bool `json:"secondaryPreferredMode,omitempty" tf:"secondary_preferred_mode,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`
}

type MongoSourceObservation struct {

	// The list of the MongoDB collections that should be transferred. If omitted, all available collections will be transferred. The structure of the list item is documented below.
	Collections []CollectionsObservation `json:"collections,omitempty" tf:"collections,omitempty"`

	// Connection settings. The structure is documented below.
	Connection []MongoSourceConnectionObservation `json:"connection,omitempty" tf:"connection,omitempty"`

	// The list of the MongoDB collections that should not be transferred.
	ExcludedCollections []ExcludedCollectionsObservation `json:"excludedCollections,omitempty" tf:"excluded_collections,omitempty"`

	// whether the secondary server should be preferred to the primary when copying data.
	SecondaryPreferredMode *bool `json:"secondaryPreferredMode,omitempty" tf:"secondary_preferred_mode,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type MongoSourceParameters struct {

	// The list of the MongoDB collections that should be transferred. If omitted, all available collections will be transferred. The structure of the list item is documented below.
	// +kubebuilder:validation:Optional
	Collections []CollectionsParameters `json:"collections,omitempty" tf:"collections,omitempty"`

	// Connection settings. The structure is documented below.
	// +kubebuilder:validation:Optional
	Connection []MongoSourceConnectionParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// The list of the MongoDB collections that should not be transferred.
	// +kubebuilder:validation:Optional
	ExcludedCollections []ExcludedCollectionsParameters `json:"excludedCollections,omitempty" tf:"excluded_collections,omitempty"`

	// whether the secondary server should be preferred to the primary when copying data.
	// +kubebuilder:validation:Optional
	SecondaryPreferredMode *bool `json:"secondaryPreferredMode,omitempty" tf:"secondary_preferred_mode,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type MongoTargetConnectionConnectionOptionsInitParameters struct {

	// Name of the database associated with the credentials.
	AuthSource *string `json:"authSource,omitempty" tf:"auth_source,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []MongoTargetConnectionConnectionOptionsOnPremiseInitParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []MongoTargetConnectionConnectionOptionsPasswordInitParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type MongoTargetConnectionConnectionOptionsObservation struct {

	// Name of the database associated with the credentials.
	AuthSource *string `json:"authSource,omitempty" tf:"auth_source,omitempty"`

	// Identifier of the Managed PostgreSQL cluster.
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []MongoTargetConnectionConnectionOptionsOnPremiseObservation `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []MongoTargetConnectionConnectionOptionsPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type MongoTargetConnectionConnectionOptionsOnPremiseInitParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Replica set name.
	ReplicaSet *string `json:"replicaSet,omitempty" tf:"replica_set,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []ConnectionConnectionOptionsOnPremiseTLSModeInitParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type MongoTargetConnectionConnectionOptionsOnPremiseObservation struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Replica set name.
	ReplicaSet *string `json:"replicaSet,omitempty" tf:"replica_set,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []ConnectionConnectionOptionsOnPremiseTLSModeObservation `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type MongoTargetConnectionConnectionOptionsOnPremiseParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Replica set name.
	// +kubebuilder:validation:Optional
	ReplicaSet *string `json:"replicaSet,omitempty" tf:"replica_set,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	TLSMode []ConnectionConnectionOptionsOnPremiseTLSModeParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type MongoTargetConnectionConnectionOptionsParameters struct {

	// Name of the database associated with the credentials.
	// +kubebuilder:validation:Optional
	AuthSource *string `json:"authSource,omitempty" tf:"auth_source,omitempty"`

	// Identifier of the Managed PostgreSQL cluster.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.MongodbCluster
	// +kubebuilder:validation:Optional
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Reference to a MongodbCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDRef *v1.Reference `json:"mdbClusterIdRef,omitempty" tf:"-"`

	// Selector for a MongodbCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDSelector *v1.Selector `json:"mdbClusterIdSelector,omitempty" tf:"-"`

	// Connection settings of the on-premise PostgreSQL server.
	// +kubebuilder:validation:Optional
	OnPremise []MongoTargetConnectionConnectionOptionsOnPremiseParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	// +kubebuilder:validation:Optional
	Password []MongoTargetConnectionConnectionOptionsPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// User for the database access.
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type MongoTargetConnectionConnectionOptionsPasswordInitParameters struct {
}

type MongoTargetConnectionConnectionOptionsPasswordObservation struct {
}

type MongoTargetConnectionConnectionOptionsPasswordParameters struct {

	// +kubebuilder:validation:Optional
	RawSecretRef *v1.SecretKeySelector `json:"rawSecretRef,omitempty" tf:"-"`
}

type MongoTargetConnectionInitParameters struct {

	// Connection options. The structure is documented below.
	ConnectionOptions []MongoTargetConnectionConnectionOptionsInitParameters `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type MongoTargetConnectionObservation struct {

	// Connection options. The structure is documented below.
	ConnectionOptions []MongoTargetConnectionConnectionOptionsObservation `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type MongoTargetConnectionParameters struct {

	// Connection options. The structure is documented below.
	// +kubebuilder:validation:Optional
	ConnectionOptions []MongoTargetConnectionConnectionOptionsParameters `json:"connectionOptions,omitempty" tf:"connection_options,omitempty"`
}

type MongoTargetInitParameters struct {

	// How to clean collections when activating the transfer. One of "DISABLED", "DROP" or "TRUNCATE".
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// Connection settings. The structure is documented below.
	Connection []MongoTargetConnectionInitParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// Name of the database to transfer.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`
}

type MongoTargetObservation struct {

	// How to clean collections when activating the transfer. One of "DISABLED", "DROP" or "TRUNCATE".
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// Connection settings. The structure is documented below.
	Connection []MongoTargetConnectionObservation `json:"connection,omitempty" tf:"connection,omitempty"`

	// Name of the database to transfer.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type MongoTargetParameters struct {

	// How to clean collections when activating the transfer. One of "DISABLED", "DROP" or "TRUNCATE".
	// +kubebuilder:validation:Optional
	CleanupPolicy *string `json:"cleanupPolicy,omitempty" tf:"cleanup_policy,omitempty"`

	// Connection settings. The structure is documented below.
	// +kubebuilder:validation:Optional
	Connection []MongoTargetConnectionParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// Name of the database to transfer.
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type MySQLSourceConnectionInitParameters struct {

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []ConnectionOnPremiseInitParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type MySQLSourceConnectionObservation struct {

	// Identifier of the Managed PostgreSQL cluster.
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []ConnectionOnPremiseObservation `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type MySQLSourceConnectionParameters struct {

	// Identifier of the Managed PostgreSQL cluster.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.MySQLCluster
	// +kubebuilder:validation:Optional
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Reference to a MySQLCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDRef *v1.Reference `json:"mdbClusterIdRef,omitempty" tf:"-"`

	// Selector for a MySQLCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDSelector *v1.Selector `json:"mdbClusterIdSelector,omitempty" tf:"-"`

	// Connection settings of the on-premise PostgreSQL server.
	// +kubebuilder:validation:Optional
	OnPremise []ConnectionOnPremiseParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type MySQLSourceInitParameters struct {

	// Connection settings. The structure is documented below.
	Connection []MySQLSourceConnectionInitParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// Opposite of include_table_regex. The tables matching the specified regular expressions will not be transferred.
	ExcludeTablesRegex []*string `json:"excludeTablesRegex,omitempty" tf:"exclude_tables_regex,omitempty"`

	// List of regular expressions of table names which should be transferred. A table name is formatted as schemaname.tablename. For example, a single regular expression may look like ^mydb.employees$.
	IncludeTablesRegex []*string `json:"includeTablesRegex,omitempty" tf:"include_tables_regex,omitempty"`

	// Defines which database schema objects should be transferred, e.g. views, functions, etc.
	ObjectTransferSettings []ObjectTransferSettingsInitParameters `json:"objectTransferSettings,omitempty" tf:"object_transfer_settings,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []MySQLSourcePasswordInitParameters `json:"password,omitempty" tf:"password,omitempty"`

	ServiceDatabase *string `json:"serviceDatabase,omitempty" tf:"service_database,omitempty"`

	// Timezone to use for parsing timestamps for saving source timezones. Accepts values from IANA timezone database. Default: local timezone.
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`
}

type MySQLSourceObservation struct {

	// Connection settings. The structure is documented below.
	Connection []MySQLSourceConnectionObservation `json:"connection,omitempty" tf:"connection,omitempty"`

	// Name of the database to transfer.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Opposite of include_table_regex. The tables matching the specified regular expressions will not be transferred.
	ExcludeTablesRegex []*string `json:"excludeTablesRegex,omitempty" tf:"exclude_tables_regex,omitempty"`

	// List of regular expressions of table names which should be transferred. A table name is formatted as schemaname.tablename. For example, a single regular expression may look like ^mydb.employees$.
	IncludeTablesRegex []*string `json:"includeTablesRegex,omitempty" tf:"include_tables_regex,omitempty"`

	// Defines which database schema objects should be transferred, e.g. views, functions, etc.
	ObjectTransferSettings []ObjectTransferSettingsObservation `json:"objectTransferSettings,omitempty" tf:"object_transfer_settings,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []MySQLSourcePasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	ServiceDatabase *string `json:"serviceDatabase,omitempty" tf:"service_database,omitempty"`

	// Timezone to use for parsing timestamps for saving source timezones. Accepts values from IANA timezone database. Default: local timezone.
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type MySQLSourceParameters struct {

	// Connection settings. The structure is documented below.
	// +kubebuilder:validation:Optional
	Connection []MySQLSourceConnectionParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// Name of the database to transfer.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.MySQLDatabase
	// +crossplane:generate:reference:extractor=github.com/yandex-cloud/provider-jet-yc/config/datatransfer.ExtractSpecName()
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Reference to a MySQLDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseRef *v1.Reference `json:"databaseRef,omitempty" tf:"-"`

	// Selector for a MySQLDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseSelector *v1.Selector `json:"databaseSelector,omitempty" tf:"-"`

	// Opposite of include_table_regex. The tables matching the specified regular expressions will not be transferred.
	// +kubebuilder:validation:Optional
	ExcludeTablesRegex []*string `json:"excludeTablesRegex,omitempty" tf:"exclude_tables_regex,omitempty"`

	// List of regular expressions of table names which should be transferred. A table name is formatted as schemaname.tablename. For example, a single regular expression may look like ^mydb.employees$.
	// +kubebuilder:validation:Optional
	IncludeTablesRegex []*string `json:"includeTablesRegex,omitempty" tf:"include_tables_regex,omitempty"`

	// Defines which database schema objects should be transferred, e.g. views, functions, etc.
	// +kubebuilder:validation:Optional
	ObjectTransferSettings []ObjectTransferSettingsParameters `json:"objectTransferSettings,omitempty" tf:"object_transfer_settings,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	// +kubebuilder:validation:Optional
	Password []MySQLSourcePasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.SecurityGroup
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsRefs []v1.Reference `json:"securityGroupsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsSelector *v1.Selector `json:"securityGroupsSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ServiceDatabase *string `json:"serviceDatabase,omitempty" tf:"service_database,omitempty"`

	// Timezone to use for parsing timestamps for saving source timezones. Accepts values from IANA timezone database. Default: local timezone.
	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// User for the database access.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.MySQLUser
	// +crossplane:generate:reference:extractor=github.com/yandex-cloud/provider-jet-yc/config/datatransfer.ExtractSpecName()
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// Reference to a MySQLUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserRef *v1.Reference `json:"userRef,omitempty" tf:"-"`

	// Selector for a MySQLUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserSelector *v1.Selector `json:"userSelector,omitempty" tf:"-"`
}

type MySQLSourcePasswordInitParameters struct {
}

type MySQLSourcePasswordObservation struct {
}

type MySQLSourcePasswordParameters struct {

	// +kubebuilder:validation:Optional
	RawSecretRef *v1.SecretKeySelector `json:"rawSecretRef,omitempty" tf:"-"`
}

type MySQLTargetConnectionInitParameters struct {

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []MySQLTargetConnectionOnPremiseInitParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type MySQLTargetConnectionObservation struct {

	// Identifier of the Managed PostgreSQL cluster.
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []MySQLTargetConnectionOnPremiseObservation `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type MySQLTargetConnectionOnPremiseInitParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []MySQLTargetConnectionOnPremiseTLSModeInitParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type MySQLTargetConnectionOnPremiseObservation struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []MySQLTargetConnectionOnPremiseTLSModeObservation `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type MySQLTargetConnectionOnPremiseParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	TLSMode []MySQLTargetConnectionOnPremiseTLSModeParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type MySQLTargetConnectionOnPremiseTLSModeDisabledInitParameters struct {
}

type MySQLTargetConnectionOnPremiseTLSModeDisabledObservation struct {
}

type MySQLTargetConnectionOnPremiseTLSModeDisabledParameters struct {
}

type MySQLTargetConnectionOnPremiseTLSModeEnabledInitParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type MySQLTargetConnectionOnPremiseTLSModeEnabledObservation struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type MySQLTargetConnectionOnPremiseTLSModeEnabledParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type MySQLTargetConnectionOnPremiseTLSModeInitParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []MySQLTargetConnectionOnPremiseTLSModeDisabledInitParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []MySQLTargetConnectionOnPremiseTLSModeEnabledInitParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type MySQLTargetConnectionOnPremiseTLSModeObservation struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []MySQLTargetConnectionOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []MySQLTargetConnectionOnPremiseTLSModeEnabledObservation `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type MySQLTargetConnectionOnPremiseTLSModeParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	// +kubebuilder:validation:Optional
	Disabled []MySQLTargetConnectionOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	Enabled []MySQLTargetConnectionOnPremiseTLSModeEnabledParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type MySQLTargetConnectionParameters struct {

	// Identifier of the Managed PostgreSQL cluster.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.MySQLCluster
	// +kubebuilder:validation:Optional
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Reference to a MySQLCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDRef *v1.Reference `json:"mdbClusterIdRef,omitempty" tf:"-"`

	// Selector for a MySQLCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDSelector *v1.Selector `json:"mdbClusterIdSelector,omitempty" tf:"-"`

	// Connection settings of the on-premise PostgreSQL server.
	// +kubebuilder:validation:Optional
	OnPremise []MySQLTargetConnectionOnPremiseParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type MySQLTargetInitParameters struct {

	// Connection settings. The structure is documented below.
	Connection []MySQLTargetConnectionInitParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []MySQLTargetPasswordInitParameters `json:"password,omitempty" tf:"password,omitempty"`

	// sql_mode to use when interacting with the server. Defaults to "NO_AUTO_VALUE_ON_ZERO,NO_DIR_IN_CREATE,NO_ENGINE_SUBSTITUTION".
	SQLMode *string `json:"sqlMode,omitempty" tf:"sql_mode,omitempty"`

	// When true, disables foreign key checks. See foreign_key_checks. False by default.
	SkipConstraintChecks *bool `json:"skipConstraintChecks,omitempty" tf:"skip_constraint_checks,omitempty"`

	// Timezone to use for parsing timestamps for saving source timezones. Accepts values from IANA timezone database. Default: local timezone.
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`
}

type MySQLTargetObservation struct {

	// Connection settings. The structure is documented below.
	Connection []MySQLTargetConnectionObservation `json:"connection,omitempty" tf:"connection,omitempty"`

	// Name of the database to transfer.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []MySQLTargetPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// sql_mode to use when interacting with the server. Defaults to "NO_AUTO_VALUE_ON_ZERO,NO_DIR_IN_CREATE,NO_ENGINE_SUBSTITUTION".
	SQLMode *string `json:"sqlMode,omitempty" tf:"sql_mode,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// When true, disables foreign key checks. See foreign_key_checks. False by default.
	SkipConstraintChecks *bool `json:"skipConstraintChecks,omitempty" tf:"skip_constraint_checks,omitempty"`

	// Timezone to use for parsing timestamps for saving source timezones. Accepts values from IANA timezone database. Default: local timezone.
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type MySQLTargetParameters struct {

	// Connection settings. The structure is documented below.
	// +kubebuilder:validation:Optional
	Connection []MySQLTargetConnectionParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// Name of the database to transfer.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.MySQLDatabase
	// +crossplane:generate:reference:extractor=github.com/yandex-cloud/provider-jet-yc/config/datatransfer.ExtractSpecName()
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Reference to a MySQLDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseRef *v1.Reference `json:"databaseRef,omitempty" tf:"-"`

	// Selector for a MySQLDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseSelector *v1.Selector `json:"databaseSelector,omitempty" tf:"-"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	// +kubebuilder:validation:Optional
	Password []MySQLTargetPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// sql_mode to use when interacting with the server. Defaults to "NO_AUTO_VALUE_ON_ZERO,NO_DIR_IN_CREATE,NO_ENGINE_SUBSTITUTION".
	// +kubebuilder:validation:Optional
	SQLMode *string `json:"sqlMode,omitempty" tf:"sql_mode,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.SecurityGroup
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsRefs []v1.Reference `json:"securityGroupsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsSelector *v1.Selector `json:"securityGroupsSelector,omitempty" tf:"-"`

	// When true, disables foreign key checks. See foreign_key_checks. False by default.
	// +kubebuilder:validation:Optional
	SkipConstraintChecks *bool `json:"skipConstraintChecks,omitempty" tf:"skip_constraint_checks,omitempty"`

	// Timezone to use for parsing timestamps for saving source timezones. Accepts values from IANA timezone database. Default: local timezone.
	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`

	// User for the database access.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.MySQLUser
	// +crossplane:generate:reference:extractor=github.com/yandex-cloud/provider-jet-yc/config/datatransfer.ExtractSpecName()
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// Reference to a MySQLUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserRef *v1.Reference `json:"userRef,omitempty" tf:"-"`

	// Selector for a MySQLUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserSelector *v1.Selector `json:"userSelector,omitempty" tf:"-"`
}

type MySQLTargetPasswordInitParameters struct {
}

type MySQLTargetPasswordObservation struct {
}

type MySQLTargetPasswordParameters struct {

	// +kubebuilder:validation:Optional
	RawSecretRef *v1.SecretKeySelector `json:"rawSecretRef,omitempty" tf:"-"`
}

type ObjectTransferSettingsInitParameters struct {
	Routine *string `json:"routine,omitempty" tf:"routine,omitempty"`

	// All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
	Trigger *string `json:"trigger,omitempty" tf:"trigger,omitempty"`

	View *string `json:"view,omitempty" tf:"view,omitempty"`
}

type ObjectTransferSettingsObservation struct {
	Routine *string `json:"routine,omitempty" tf:"routine,omitempty"`

	// All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
	Trigger *string `json:"trigger,omitempty" tf:"trigger,omitempty"`

	View *string `json:"view,omitempty" tf:"view,omitempty"`
}

type ObjectTransferSettingsParameters struct {

	// +kubebuilder:validation:Optional
	Routine *string `json:"routine,omitempty" tf:"routine,omitempty"`

	// All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
	// +kubebuilder:validation:Optional
	Trigger *string `json:"trigger,omitempty" tf:"trigger,omitempty"`

	// +kubebuilder:validation:Optional
	View *string `json:"view,omitempty" tf:"view,omitempty"`
}

type OnPremiseInitParameters struct {

	// TCP port number for the HTTP interface of the ClickHouse server.
	HTTPPort *float64 `json:"httpPort,omitempty" tf:"http_port,omitempty"`

	// TCP port number for the native interface of the ClickHouse server.
	NativePort *float64 `json:"nativePort,omitempty" tf:"native_port,omitempty"`

	// The list of ClickHouse shards. The structure is documented below.
	Shards []ShardsInitParameters `json:"shards,omitempty" tf:"shards,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []TLSModeInitParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type OnPremiseObservation struct {

	// TCP port number for the HTTP interface of the ClickHouse server.
	HTTPPort *float64 `json:"httpPort,omitempty" tf:"http_port,omitempty"`

	// TCP port number for the native interface of the ClickHouse server.
	NativePort *float64 `json:"nativePort,omitempty" tf:"native_port,omitempty"`

	// The list of ClickHouse shards. The structure is documented below.
	Shards []ShardsObservation `json:"shards,omitempty" tf:"shards,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []TLSModeObservation `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type OnPremiseParameters struct {

	// TCP port number for the HTTP interface of the ClickHouse server.
	// +kubebuilder:validation:Optional
	HTTPPort *float64 `json:"httpPort,omitempty" tf:"http_port,omitempty"`

	// TCP port number for the native interface of the ClickHouse server.
	// +kubebuilder:validation:Optional
	NativePort *float64 `json:"nativePort,omitempty" tf:"native_port,omitempty"`

	// The list of ClickHouse shards. The structure is documented below.
	// +kubebuilder:validation:Optional
	Shards []ShardsParameters `json:"shards,omitempty" tf:"shards,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	TLSMode []TLSModeParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type OnPremiseShardsInitParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Name of the endpoint.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type OnPremiseShardsObservation struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Name of the endpoint.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type OnPremiseShardsParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Name of the endpoint.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type OnPremiseTLSModeDisabledInitParameters struct {
}

type OnPremiseTLSModeDisabledObservation struct {
}

type OnPremiseTLSModeDisabledParameters struct {
}

type OnPremiseTLSModeEnabledInitParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type OnPremiseTLSModeEnabledObservation struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type OnPremiseTLSModeEnabledParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type OnPremiseTLSModeInitParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []TLSModeDisabledInitParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []TLSModeEnabledInitParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type OnPremiseTLSModeObservation struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []TLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []TLSModeEnabledObservation `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type OnPremiseTLSModeParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	// +kubebuilder:validation:Optional
	Disabled []TLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	Enabled []TLSModeEnabledParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type PasswordInitParameters struct {
}

type PasswordObservation struct {
}

type PasswordParameters struct {

	// +kubebuilder:validation:Optional
	RawSecretRef *v1.SecretKeySelector `json:"rawSecretRef,omitempty" tf:"-"`
}

type PostgresSourceConnectionInitParameters struct {

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []PostgresSourceConnectionOnPremiseInitParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type PostgresSourceConnectionObservation struct {

	// Identifier of the Managed PostgreSQL cluster.
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []PostgresSourceConnectionOnPremiseObservation `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type PostgresSourceConnectionOnPremiseInitParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []PostgresSourceConnectionOnPremiseTLSModeInitParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type PostgresSourceConnectionOnPremiseObservation struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []PostgresSourceConnectionOnPremiseTLSModeObservation `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type PostgresSourceConnectionOnPremiseParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	TLSMode []PostgresSourceConnectionOnPremiseTLSModeParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type PostgresSourceConnectionOnPremiseTLSModeDisabledInitParameters struct {
}

type PostgresSourceConnectionOnPremiseTLSModeDisabledObservation struct {
}

type PostgresSourceConnectionOnPremiseTLSModeDisabledParameters struct {
}

type PostgresSourceConnectionOnPremiseTLSModeEnabledInitParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type PostgresSourceConnectionOnPremiseTLSModeEnabledObservation struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type PostgresSourceConnectionOnPremiseTLSModeEnabledParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type PostgresSourceConnectionOnPremiseTLSModeInitParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []PostgresSourceConnectionOnPremiseTLSModeDisabledInitParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []PostgresSourceConnectionOnPremiseTLSModeEnabledInitParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type PostgresSourceConnectionOnPremiseTLSModeObservation struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []PostgresSourceConnectionOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []PostgresSourceConnectionOnPremiseTLSModeEnabledObservation `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type PostgresSourceConnectionOnPremiseTLSModeParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	// +kubebuilder:validation:Optional
	Disabled []PostgresSourceConnectionOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	Enabled []PostgresSourceConnectionOnPremiseTLSModeEnabledParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type PostgresSourceConnectionParameters struct {

	// Identifier of the Managed PostgreSQL cluster.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.PostgresqlCluster
	// +kubebuilder:validation:Optional
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Reference to a PostgresqlCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDRef *v1.Reference `json:"mdbClusterIdRef,omitempty" tf:"-"`

	// Selector for a PostgresqlCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDSelector *v1.Selector `json:"mdbClusterIdSelector,omitempty" tf:"-"`

	// Connection settings of the on-premise PostgreSQL server.
	// +kubebuilder:validation:Optional
	OnPremise []PostgresSourceConnectionOnPremiseParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type PostgresSourceInitParameters struct {

	// Connection settings. The structure is documented below.
	Connection []PostgresSourceConnectionInitParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// List of tables which will not be transfered, formatted as schemaname.tablename.
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	// List of tables to transfer, formatted as schemaname.tablename. If omitted or an empty list is specified, all tables will be transferred.
	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`

	// Defines which database schema objects should be transferred, e.g. views, functions, etc.
	ObjectTransferSettings []PostgresSourceObjectTransferSettingsInitParameters `json:"objectTransferSettings,omitempty" tf:"object_transfer_settings,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []PostgresSourcePasswordInitParameters `json:"password,omitempty" tf:"password,omitempty"`

	// Name of the database schema in which auxiliary tables needed for the transfer will be created. Empty service_schema implies schema "public".
	ServiceSchema *string `json:"serviceSchema,omitempty" tf:"service_schema,omitempty"`

	// Maximum WAL size held by the replication slot, in gigabytes. Exceeding this limit will result in a replication failure and deletion of the replication slot. Unlimited by default.
	SlotGigabyteLagLimit *float64 `json:"slotGigabyteLagLimit,omitempty" tf:"slot_gigabyte_lag_limit,omitempty"`
}

type PostgresSourceObjectTransferSettingsInitParameters struct {

	// All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
	Cast *string `json:"cast,omitempty" tf:"cast,omitempty"`

	Collation *string `json:"collation,omitempty" tf:"collation,omitempty"`

	Constraint *string `json:"constraint,omitempty" tf:"constraint,omitempty"`

	DefaultValues *string `json:"defaultValues,omitempty" tf:"default_values,omitempty"`

	FkConstraint *string `json:"fkConstraint,omitempty" tf:"fk_constraint,omitempty"`

	Function *string `json:"function,omitempty" tf:"function,omitempty"`

	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	MaterializedView *string `json:"materializedView,omitempty" tf:"materialized_view,omitempty"`

	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	PrimaryKey *string `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`

	Rule *string `json:"rule,omitempty" tf:"rule,omitempty"`

	Sequence *string `json:"sequence,omitempty" tf:"sequence,omitempty"`

	SequenceOwnedBy *string `json:"sequenceOwnedBy,omitempty" tf:"sequence_owned_by,omitempty"`

	Table *string `json:"table,omitempty" tf:"table,omitempty"`

	// All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
	Trigger *string `json:"trigger,omitempty" tf:"trigger,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	View *string `json:"view,omitempty" tf:"view,omitempty"`
}

type PostgresSourceObjectTransferSettingsObservation struct {

	// All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
	Cast *string `json:"cast,omitempty" tf:"cast,omitempty"`

	Collation *string `json:"collation,omitempty" tf:"collation,omitempty"`

	Constraint *string `json:"constraint,omitempty" tf:"constraint,omitempty"`

	DefaultValues *string `json:"defaultValues,omitempty" tf:"default_values,omitempty"`

	FkConstraint *string `json:"fkConstraint,omitempty" tf:"fk_constraint,omitempty"`

	Function *string `json:"function,omitempty" tf:"function,omitempty"`

	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	MaterializedView *string `json:"materializedView,omitempty" tf:"materialized_view,omitempty"`

	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	PrimaryKey *string `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`

	Rule *string `json:"rule,omitempty" tf:"rule,omitempty"`

	Sequence *string `json:"sequence,omitempty" tf:"sequence,omitempty"`

	SequenceOwnedBy *string `json:"sequenceOwnedBy,omitempty" tf:"sequence_owned_by,omitempty"`

	Table *string `json:"table,omitempty" tf:"table,omitempty"`

	// All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
	Trigger *string `json:"trigger,omitempty" tf:"trigger,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	View *string `json:"view,omitempty" tf:"view,omitempty"`
}

type PostgresSourceObjectTransferSettingsParameters struct {

	// All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
	// +kubebuilder:validation:Optional
	Cast *string `json:"cast,omitempty" tf:"cast,omitempty"`

	// +kubebuilder:validation:Optional
	Collation *string `json:"collation,omitempty" tf:"collation,omitempty"`

	// +kubebuilder:validation:Optional
	Constraint *string `json:"constraint,omitempty" tf:"constraint,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultValues *string `json:"defaultValues,omitempty" tf:"default_values,omitempty"`

	// +kubebuilder:validation:Optional
	FkConstraint *string `json:"fkConstraint,omitempty" tf:"fk_constraint,omitempty"`

	// +kubebuilder:validation:Optional
	Function *string `json:"function,omitempty" tf:"function,omitempty"`

	// +kubebuilder:validation:Optional
	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	// +kubebuilder:validation:Optional
	MaterializedView *string `json:"materializedView,omitempty" tf:"materialized_view,omitempty"`

	// +kubebuilder:validation:Optional
	Policy *string `json:"policy,omitempty" tf:"policy,omitempty"`

	// +kubebuilder:validation:Optional
	PrimaryKey *string `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`

	// +kubebuilder:validation:Optional
	Rule *string `json:"rule,omitempty" tf:"rule,omitempty"`

	// +kubebuilder:validation:Optional
	Sequence *string `json:"sequence,omitempty" tf:"sequence,omitempty"`

	// +kubebuilder:validation:Optional
	SequenceOwnedBy *string `json:"sequenceOwnedBy,omitempty" tf:"sequence_owned_by,omitempty"`

	// +kubebuilder:validation:Optional
	Table *string `json:"table,omitempty" tf:"table,omitempty"`

	// All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
	// +kubebuilder:validation:Optional
	Trigger *string `json:"trigger,omitempty" tf:"trigger,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	View *string `json:"view,omitempty" tf:"view,omitempty"`
}

type PostgresSourceObservation struct {

	// Connection settings. The structure is documented below.
	Connection []PostgresSourceConnectionObservation `json:"connection,omitempty" tf:"connection,omitempty"`

	// Name of the database to transfer.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// List of tables which will not be transfered, formatted as schemaname.tablename.
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	// List of tables to transfer, formatted as schemaname.tablename. If omitted or an empty list is specified, all tables will be transferred.
	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`

	// Defines which database schema objects should be transferred, e.g. views, functions, etc.
	ObjectTransferSettings []PostgresSourceObjectTransferSettingsObservation `json:"objectTransferSettings,omitempty" tf:"object_transfer_settings,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []PostgresSourcePasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// Name of the database schema in which auxiliary tables needed for the transfer will be created. Empty service_schema implies schema "public".
	ServiceSchema *string `json:"serviceSchema,omitempty" tf:"service_schema,omitempty"`

	// Maximum WAL size held by the replication slot, in gigabytes. Exceeding this limit will result in a replication failure and deletion of the replication slot. Unlimited by default.
	SlotGigabyteLagLimit *float64 `json:"slotGigabyteLagLimit,omitempty" tf:"slot_gigabyte_lag_limit,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type PostgresSourceParameters struct {

	// Connection settings. The structure is documented below.
	// +kubebuilder:validation:Optional
	Connection []PostgresSourceConnectionParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// Name of the database to transfer.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.PostgresqlDatabase
	// +crossplane:generate:reference:extractor=github.com/yandex-cloud/provider-jet-yc/config/datatransfer.ExtractSpecName()
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Reference to a PostgresqlDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseRef *v1.Reference `json:"databaseRef,omitempty" tf:"-"`

	// Selector for a PostgresqlDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseSelector *v1.Selector `json:"databaseSelector,omitempty" tf:"-"`

	// List of tables which will not be transfered, formatted as schemaname.tablename.
	// +kubebuilder:validation:Optional
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	// List of tables to transfer, formatted as schemaname.tablename. If omitted or an empty list is specified, all tables will be transferred.
	// +kubebuilder:validation:Optional
	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`

	// Defines which database schema objects should be transferred, e.g. views, functions, etc.
	// +kubebuilder:validation:Optional
	ObjectTransferSettings []PostgresSourceObjectTransferSettingsParameters `json:"objectTransferSettings,omitempty" tf:"object_transfer_settings,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	// +kubebuilder:validation:Optional
	Password []PostgresSourcePasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.SecurityGroup
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsRefs []v1.Reference `json:"securityGroupsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsSelector *v1.Selector `json:"securityGroupsSelector,omitempty" tf:"-"`

	// Name of the database schema in which auxiliary tables needed for the transfer will be created. Empty service_schema implies schema "public".
	// +kubebuilder:validation:Optional
	ServiceSchema *string `json:"serviceSchema,omitempty" tf:"service_schema,omitempty"`

	// Maximum WAL size held by the replication slot, in gigabytes. Exceeding this limit will result in a replication failure and deletion of the replication slot. Unlimited by default.
	// +kubebuilder:validation:Optional
	SlotGigabyteLagLimit *float64 `json:"slotGigabyteLagLimit,omitempty" tf:"slot_gigabyte_lag_limit,omitempty"`

	// User for the database access.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.PostgresqlUser
	// +crossplane:generate:reference:extractor=github.com/yandex-cloud/provider-jet-yc/config/datatransfer.ExtractSpecName()
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// Reference to a PostgresqlUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserRef *v1.Reference `json:"userRef,omitempty" tf:"-"`

	// Selector for a PostgresqlUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserSelector *v1.Selector `json:"userSelector,omitempty" tf:"-"`
}

type PostgresSourcePasswordInitParameters struct {
}

type PostgresSourcePasswordObservation struct {
}

type PostgresSourcePasswordParameters struct {

	// +kubebuilder:validation:Optional
	RawSecretRef *v1.SecretKeySelector `json:"rawSecretRef,omitempty" tf:"-"`
}

type PostgresTargetConnectionInitParameters struct {

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []PostgresTargetConnectionOnPremiseInitParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type PostgresTargetConnectionObservation struct {

	// Identifier of the Managed PostgreSQL cluster.
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Connection settings of the on-premise PostgreSQL server.
	OnPremise []PostgresTargetConnectionOnPremiseObservation `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type PostgresTargetConnectionOnPremiseInitParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []PostgresTargetConnectionOnPremiseTLSModeInitParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type PostgresTargetConnectionOnPremiseObservation struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	TLSMode []PostgresTargetConnectionOnPremiseTLSModeObservation `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type PostgresTargetConnectionOnPremiseParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Port for the database connection.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in vpc to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	TLSMode []PostgresTargetConnectionOnPremiseTLSModeParameters `json:"tlsMode,omitempty" tf:"tls_mode,omitempty"`
}

type PostgresTargetConnectionOnPremiseTLSModeDisabledInitParameters struct {
}

type PostgresTargetConnectionOnPremiseTLSModeDisabledObservation struct {
}

type PostgresTargetConnectionOnPremiseTLSModeDisabledParameters struct {
}

type PostgresTargetConnectionOnPremiseTLSModeEnabledInitParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type PostgresTargetConnectionOnPremiseTLSModeEnabledObservation struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type PostgresTargetConnectionOnPremiseTLSModeEnabledParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type PostgresTargetConnectionOnPremiseTLSModeInitParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []PostgresTargetConnectionOnPremiseTLSModeDisabledInitParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []PostgresTargetConnectionOnPremiseTLSModeEnabledInitParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type PostgresTargetConnectionOnPremiseTLSModeObservation struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []PostgresTargetConnectionOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []PostgresTargetConnectionOnPremiseTLSModeEnabledObservation `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type PostgresTargetConnectionOnPremiseTLSModeParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	// +kubebuilder:validation:Optional
	Disabled []PostgresTargetConnectionOnPremiseTLSModeDisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	Enabled []PostgresTargetConnectionOnPremiseTLSModeEnabledParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type PostgresTargetConnectionParameters struct {

	// Identifier of the Managed PostgreSQL cluster.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.PostgresqlCluster
	// +kubebuilder:validation:Optional
	MdbClusterID *string `json:"mdbClusterId,omitempty" tf:"mdb_cluster_id,omitempty"`

	// Reference to a PostgresqlCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDRef *v1.Reference `json:"mdbClusterIdRef,omitempty" tf:"-"`

	// Selector for a PostgresqlCluster in mdb to populate mdbClusterId.
	// +kubebuilder:validation:Optional
	MdbClusterIDSelector *v1.Selector `json:"mdbClusterIdSelector,omitempty" tf:"-"`

	// Connection settings of the on-premise PostgreSQL server.
	// +kubebuilder:validation:Optional
	OnPremise []PostgresTargetConnectionOnPremiseParameters `json:"onPremise,omitempty" tf:"on_premise,omitempty"`
}

type PostgresTargetInitParameters struct {

	// Connection settings. The structure is documented below.
	Connection []PostgresTargetConnectionInitParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []PostgresTargetPasswordInitParameters `json:"password,omitempty" tf:"password,omitempty"`
}

type PostgresTargetObservation struct {

	// Connection settings. The structure is documented below.
	Connection []PostgresTargetConnectionObservation `json:"connection,omitempty" tf:"connection,omitempty"`

	// Name of the database to transfer.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	Password []PostgresTargetPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// User for the database access.
	User *string `json:"user,omitempty" tf:"user,omitempty"`
}

type PostgresTargetParameters struct {

	// Connection settings. The structure is documented below.
	// +kubebuilder:validation:Optional
	Connection []PostgresTargetConnectionParameters `json:"connection,omitempty" tf:"connection,omitempty"`

	// Name of the database to transfer.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.PostgresqlDatabase
	// +crossplane:generate:reference:extractor=github.com/yandex-cloud/provider-jet-yc/config/datatransfer.ExtractSpecName()
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// Reference to a PostgresqlDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseRef *v1.Reference `json:"databaseRef,omitempty" tf:"-"`

	// Selector for a PostgresqlDatabase in mdb to populate database.
	// +kubebuilder:validation:Optional
	DatabaseSelector *v1.Selector `json:"databaseSelector,omitempty" tf:"-"`

	// Password for the database access. This is a block with a single field named raw which should contain the password.
	// +kubebuilder:validation:Optional
	Password []PostgresTargetPasswordParameters `json:"password,omitempty" tf:"password,omitempty"`

	// List of security groups that the transfer associated with this endpoint should use.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/vpc/v1alpha1.SecurityGroup
	// +kubebuilder:validation:Optional
	SecurityGroups []*string `json:"securityGroups,omitempty" tf:"security_groups,omitempty"`

	// References to SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsRefs []v1.Reference `json:"securityGroupsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in vpc to populate securityGroups.
	// +kubebuilder:validation:Optional
	SecurityGroupsSelector *v1.Selector `json:"securityGroupsSelector,omitempty" tf:"-"`

	// User for the database access.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/mdb/v1alpha1.PostgresqlUser
	// +crossplane:generate:reference:extractor=github.com/yandex-cloud/provider-jet-yc/config/datatransfer.ExtractSpecName()
	// +kubebuilder:validation:Optional
	User *string `json:"user,omitempty" tf:"user,omitempty"`

	// Reference to a PostgresqlUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserRef *v1.Reference `json:"userRef,omitempty" tf:"-"`

	// Selector for a PostgresqlUser in mdb to populate user.
	// +kubebuilder:validation:Optional
	UserSelector *v1.Selector `json:"userSelector,omitempty" tf:"-"`
}

type PostgresTargetPasswordInitParameters struct {
}

type PostgresTargetPasswordObservation struct {
}

type PostgresTargetPasswordParameters struct {

	// +kubebuilder:validation:Optional
	RawSecretRef *v1.SecretKeySelector `json:"rawSecretRef,omitempty" tf:"-"`
}

type SettingsInitParameters struct {
	ClickhouseSource []ClickhouseSourceInitParameters `json:"clickhouseSource,omitempty" tf:"clickhouse_source,omitempty"`

	ClickhouseTarget []ClickhouseTargetInitParameters `json:"clickhouseTarget,omitempty" tf:"clickhouse_target,omitempty"`

	MongoSource []MongoSourceInitParameters `json:"mongoSource,omitempty" tf:"mongo_source,omitempty"`

	MongoTarget []MongoTargetInitParameters `json:"mongoTarget,omitempty" tf:"mongo_target,omitempty"`

	// Settings specific to the MySQL source endpoint.
	MySQLSource []MySQLSourceInitParameters `json:"mysqlSource,omitempty" tf:"mysql_source,omitempty"`

	// Settings specific to the MySQL target endpoint.
	MySQLTarget []MySQLTargetInitParameters `json:"mysqlTarget,omitempty" tf:"mysql_target,omitempty"`

	// Settings specific to the PostgreSQL source endpoint.
	PostgresSource []PostgresSourceInitParameters `json:"postgresSource,omitempty" tf:"postgres_source,omitempty"`

	// Settings specific to the PostgreSQL target endpoint.
	PostgresTarget []PostgresTargetInitParameters `json:"postgresTarget,omitempty" tf:"postgres_target,omitempty"`
}

type SettingsObservation struct {
	ClickhouseSource []ClickhouseSourceObservation `json:"clickhouseSource,omitempty" tf:"clickhouse_source,omitempty"`

	ClickhouseTarget []ClickhouseTargetObservation `json:"clickhouseTarget,omitempty" tf:"clickhouse_target,omitempty"`

	MongoSource []MongoSourceObservation `json:"mongoSource,omitempty" tf:"mongo_source,omitempty"`

	MongoTarget []MongoTargetObservation `json:"mongoTarget,omitempty" tf:"mongo_target,omitempty"`

	// Settings specific to the MySQL source endpoint.
	MySQLSource []MySQLSourceObservation `json:"mysqlSource,omitempty" tf:"mysql_source,omitempty"`

	// Settings specific to the MySQL target endpoint.
	MySQLTarget []MySQLTargetObservation `json:"mysqlTarget,omitempty" tf:"mysql_target,omitempty"`

	// Settings specific to the PostgreSQL source endpoint.
	PostgresSource []PostgresSourceObservation `json:"postgresSource,omitempty" tf:"postgres_source,omitempty"`

	// Settings specific to the PostgreSQL target endpoint.
	PostgresTarget []PostgresTargetObservation `json:"postgresTarget,omitempty" tf:"postgres_target,omitempty"`
}

type SettingsParameters struct {

	// +kubebuilder:validation:Optional
	ClickhouseSource []ClickhouseSourceParameters `json:"clickhouseSource,omitempty" tf:"clickhouse_source,omitempty"`

	// +kubebuilder:validation:Optional
	ClickhouseTarget []ClickhouseTargetParameters `json:"clickhouseTarget,omitempty" tf:"clickhouse_target,omitempty"`

	// +kubebuilder:validation:Optional
	MongoSource []MongoSourceParameters `json:"mongoSource,omitempty" tf:"mongo_source,omitempty"`

	// +kubebuilder:validation:Optional
	MongoTarget []MongoTargetParameters `json:"mongoTarget,omitempty" tf:"mongo_target,omitempty"`

	// Settings specific to the MySQL source endpoint.
	// +kubebuilder:validation:Optional
	MySQLSource []MySQLSourceParameters `json:"mysqlSource,omitempty" tf:"mysql_source,omitempty"`

	// Settings specific to the MySQL target endpoint.
	// +kubebuilder:validation:Optional
	MySQLTarget []MySQLTargetParameters `json:"mysqlTarget,omitempty" tf:"mysql_target,omitempty"`

	// Settings specific to the PostgreSQL source endpoint.
	// +kubebuilder:validation:Optional
	PostgresSource []PostgresSourceParameters `json:"postgresSource,omitempty" tf:"postgres_source,omitempty"`

	// Settings specific to the PostgreSQL target endpoint.
	// +kubebuilder:validation:Optional
	PostgresTarget []PostgresTargetParameters `json:"postgresTarget,omitempty" tf:"postgres_target,omitempty"`
}

type ShardingInitParameters struct {

	// Shard data by the hash value of the specified column. The structure is documented below.
	ColumnValueHash []ColumnValueHashInitParameters `json:"columnValueHash,omitempty" tf:"column_value_hash,omitempty"`

	// Shard data by ID of the transfer.
	TransferID []TransferIDInitParameters `json:"transferId,omitempty" tf:"transfer_id,omitempty"`
}

type ShardingObservation struct {

	// Shard data by the hash value of the specified column. The structure is documented below.
	ColumnValueHash []ColumnValueHashObservation `json:"columnValueHash,omitempty" tf:"column_value_hash,omitempty"`

	// Shard data by ID of the transfer.
	TransferID []TransferIDParameters `json:"transferId,omitempty" tf:"transfer_id,omitempty"`
}

type ShardingParameters struct {

	// Shard data by the hash value of the specified column. The structure is documented below.
	// +kubebuilder:validation:Optional
	ColumnValueHash []ColumnValueHashParameters `json:"columnValueHash,omitempty" tf:"column_value_hash,omitempty"`

	// Shard data by ID of the transfer.
	// +kubebuilder:validation:Optional
	TransferID []TransferIDParameters `json:"transferId,omitempty" tf:"transfer_id,omitempty"`
}

type ShardsInitParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Name of the endpoint.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ShardsObservation struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Name of the endpoint.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ShardsParameters struct {

	// List of host names of the PostgreSQL server. Exactly one host is expected currently.
	// +kubebuilder:validation:Optional
	Hosts []*string `json:"hosts,omitempty" tf:"hosts,omitempty"`

	// Name of the endpoint.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type TLSModeDisabledInitParameters struct {
}

type TLSModeDisabledObservation struct {
}

type TLSModeDisabledParameters struct {
}

type TLSModeEnabledInitParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type TLSModeEnabledObservation struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type TLSModeEnabledParameters struct {

	// X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
	// +kubebuilder:validation:Optional
	CACertificate *string `json:"caCertificate,omitempty" tf:"ca_certificate,omitempty"`
}

type TLSModeInitParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []DisabledInitParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []EnabledInitParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type TLSModeObservation struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	Disabled []DisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	Enabled []EnabledObservation `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type TLSModeParameters struct {

	// Empty block designating that the connection is not secured, i.e. plaintext connection.
	// +kubebuilder:validation:Optional
	Disabled []DisabledParameters `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
	// +kubebuilder:validation:Optional
	Enabled []EnabledParameters `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type TransferIDInitParameters struct {
}

type TransferIDObservation struct {
}

type TransferIDParameters struct {
}

// EndpointSpec defines the desired state of Endpoint
type EndpointSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EndpointParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider EndpointInitParameters `json:"initProvider,omitempty"`
}

// EndpointStatus defines the observed state of Endpoint.
type EndpointStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Endpoint is the Schema for the Endpoints API. Manages a Data Transfer endpoint within Yandex.Cloud.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type Endpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EndpointSpec   `json:"spec"`
	Status            EndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointList contains a list of Endpoints
type EndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Endpoint `json:"items"`
}

// Repository type metadata.
var (
	Endpoint_Kind             = "Endpoint"
	Endpoint_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Endpoint_Kind}.String()
	Endpoint_KindAPIVersion   = Endpoint_Kind + "." + CRDGroupVersion.String()
	Endpoint_GroupVersionKind = CRDGroupVersion.WithKind(Endpoint_Kind)
)

func init() {
	SchemeBuilder.Register(&Endpoint{}, &EndpointList{})
}
