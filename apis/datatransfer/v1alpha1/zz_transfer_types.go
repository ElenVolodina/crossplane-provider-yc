/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ColumnsObservation struct {
	ExcludeColumns []*string `json:"excludeColumns,omitempty" tf:"exclude_columns,omitempty"`

	IncludeColumns []*string `json:"includeColumns,omitempty" tf:"include_columns,omitempty"`
}

type ColumnsParameters struct {

	// +kubebuilder:validation:Optional
	ExcludeColumns []*string `json:"excludeColumns,omitempty" tf:"exclude_columns,omitempty"`

	// +kubebuilder:validation:Optional
	IncludeColumns []*string `json:"includeColumns,omitempty" tf:"include_columns,omitempty"`
}

type ConvertToStringObservation struct {
	Columns []ColumnsObservation `json:"columns,omitempty" tf:"columns,omitempty"`

	Tables []TablesObservation `json:"tables,omitempty" tf:"tables,omitempty"`
}

type ConvertToStringParameters struct {

	// +kubebuilder:validation:Optional
	Columns []ColumnsParameters `json:"columns,omitempty" tf:"columns,omitempty"`

	// +kubebuilder:validation:Optional
	Tables []TablesParameters `json:"tables,omitempty" tf:"tables,omitempty"`
}

type FilterColumnsColumnsObservation struct {
	ExcludeColumns []*string `json:"excludeColumns,omitempty" tf:"exclude_columns,omitempty"`

	IncludeColumns []*string `json:"includeColumns,omitempty" tf:"include_columns,omitempty"`
}

type FilterColumnsColumnsParameters struct {

	// +kubebuilder:validation:Optional
	ExcludeColumns []*string `json:"excludeColumns,omitempty" tf:"exclude_columns,omitempty"`

	// +kubebuilder:validation:Optional
	IncludeColumns []*string `json:"includeColumns,omitempty" tf:"include_columns,omitempty"`
}

type FilterColumnsObservation struct {
	Columns []FilterColumnsColumnsObservation `json:"columns,omitempty" tf:"columns,omitempty"`

	Tables []FilterColumnsTablesObservation `json:"tables,omitempty" tf:"tables,omitempty"`
}

type FilterColumnsParameters struct {

	// +kubebuilder:validation:Optional
	Columns []FilterColumnsColumnsParameters `json:"columns,omitempty" tf:"columns,omitempty"`

	// +kubebuilder:validation:Optional
	Tables []FilterColumnsTablesParameters `json:"tables,omitempty" tf:"tables,omitempty"`
}

type FilterColumnsTablesObservation struct {
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`
}

type FilterColumnsTablesParameters struct {

	// +kubebuilder:validation:Optional
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	// +kubebuilder:validation:Optional
	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`
}

type FilterRowsObservation struct {
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	Tables []FilterRowsTablesObservation `json:"tables,omitempty" tf:"tables,omitempty"`
}

type FilterRowsParameters struct {

	// +kubebuilder:validation:Optional
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// +kubebuilder:validation:Optional
	Tables []FilterRowsTablesParameters `json:"tables,omitempty" tf:"tables,omitempty"`
}

type FilterRowsTablesObservation struct {
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`
}

type FilterRowsTablesParameters struct {

	// +kubebuilder:validation:Optional
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	// +kubebuilder:validation:Optional
	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`
}

type FunctionObservation struct {
	MaskFunctionHash []MaskFunctionHashObservation `json:"maskFunctionHash,omitempty" tf:"mask_function_hash,omitempty"`
}

type FunctionParameters struct {

	// +kubebuilder:validation:Optional
	MaskFunctionHash []MaskFunctionHashParameters `json:"maskFunctionHash,omitempty" tf:"mask_function_hash,omitempty"`
}

type MaskFieldObservation struct {
	Columns []*string `json:"columns,omitempty" tf:"columns,omitempty"`

	Function []FunctionObservation `json:"function,omitempty" tf:"function,omitempty"`

	Tables []MaskFieldTablesObservation `json:"tables,omitempty" tf:"tables,omitempty"`
}

type MaskFieldParameters struct {

	// +kubebuilder:validation:Optional
	Columns []*string `json:"columns,omitempty" tf:"columns,omitempty"`

	// +kubebuilder:validation:Optional
	Function []FunctionParameters `json:"function,omitempty" tf:"function,omitempty"`

	// +kubebuilder:validation:Optional
	Tables []MaskFieldTablesParameters `json:"tables,omitempty" tf:"tables,omitempty"`
}

type MaskFieldTablesObservation struct {
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`
}

type MaskFieldTablesParameters struct {

	// +kubebuilder:validation:Optional
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	// +kubebuilder:validation:Optional
	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`
}

type MaskFunctionHashObservation struct {
	UserDefinedSalt *string `json:"userDefinedSalt,omitempty" tf:"user_defined_salt,omitempty"`
}

type MaskFunctionHashParameters struct {

	// +kubebuilder:validation:Optional
	UserDefinedSalt *string `json:"userDefinedSalt,omitempty" tf:"user_defined_salt,omitempty"`
}

type NewNameObservation struct {

	// Name of the transfer.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	NameSpace *string `json:"nameSpace,omitempty" tf:"name_space,omitempty"`
}

type NewNameParameters struct {

	// Name of the transfer.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NameSpace *string `json:"nameSpace,omitempty" tf:"name_space,omitempty"`
}

type OriginalNameObservation struct {

	// Name of the transfer.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	NameSpace *string `json:"nameSpace,omitempty" tf:"name_space,omitempty"`
}

type OriginalNameParameters struct {

	// Name of the transfer.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NameSpace *string `json:"nameSpace,omitempty" tf:"name_space,omitempty"`
}

type RenameTablesObservation struct {
	RenameTables []RenameTablesRenameTablesObservation `json:"renameTables,omitempty" tf:"rename_tables,omitempty"`
}

type RenameTablesParameters struct {

	// +kubebuilder:validation:Optional
	RenameTables []RenameTablesRenameTablesParameters `json:"renameTables,omitempty" tf:"rename_tables,omitempty"`
}

type RenameTablesRenameTablesObservation struct {

	// Name of the transfer.
	NewName []NewNameObservation `json:"newName,omitempty" tf:"new_name,omitempty"`

	// Name of the transfer.
	OriginalName []OriginalNameObservation `json:"originalName,omitempty" tf:"original_name,omitempty"`
}

type RenameTablesRenameTablesParameters struct {

	// Name of the transfer.
	// +kubebuilder:validation:Optional
	NewName []NewNameParameters `json:"newName,omitempty" tf:"new_name,omitempty"`

	// Name of the transfer.
	// +kubebuilder:validation:Optional
	OriginalName []OriginalNameParameters `json:"originalName,omitempty" tf:"original_name,omitempty"`
}

type ReplacePrimaryKeyObservation struct {
	Keys []*string `json:"keys,omitempty" tf:"keys,omitempty"`

	Tables []ReplacePrimaryKeyTablesObservation `json:"tables,omitempty" tf:"tables,omitempty"`
}

type ReplacePrimaryKeyParameters struct {

	// +kubebuilder:validation:Optional
	Keys []*string `json:"keys,omitempty" tf:"keys,omitempty"`

	// +kubebuilder:validation:Optional
	Tables []ReplacePrimaryKeyTablesParameters `json:"tables,omitempty" tf:"tables,omitempty"`
}

type ReplacePrimaryKeyTablesObservation struct {
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`
}

type ReplacePrimaryKeyTablesParameters struct {

	// +kubebuilder:validation:Optional
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	// +kubebuilder:validation:Optional
	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`
}

type RuntimeObservation struct {
	YcRuntime []YcRuntimeObservation `json:"ycRuntime,omitempty" tf:"yc_runtime,omitempty"`
}

type RuntimeParameters struct {

	// +kubebuilder:validation:Optional
	YcRuntime []YcRuntimeParameters `json:"ycRuntime,omitempty" tf:"yc_runtime,omitempty"`
}

type SharderTransformerColumnsObservation struct {
	ExcludeColumns []*string `json:"excludeColumns,omitempty" tf:"exclude_columns,omitempty"`

	IncludeColumns []*string `json:"includeColumns,omitempty" tf:"include_columns,omitempty"`
}

type SharderTransformerColumnsParameters struct {

	// +kubebuilder:validation:Optional
	ExcludeColumns []*string `json:"excludeColumns,omitempty" tf:"exclude_columns,omitempty"`

	// +kubebuilder:validation:Optional
	IncludeColumns []*string `json:"includeColumns,omitempty" tf:"include_columns,omitempty"`
}

type SharderTransformerObservation struct {
	Columns []SharderTransformerColumnsObservation `json:"columns,omitempty" tf:"columns,omitempty"`

	ShardsCount *float64 `json:"shardsCount,omitempty" tf:"shards_count,omitempty"`

	Tables []SharderTransformerTablesObservation `json:"tables,omitempty" tf:"tables,omitempty"`
}

type SharderTransformerParameters struct {

	// +kubebuilder:validation:Optional
	Columns []SharderTransformerColumnsParameters `json:"columns,omitempty" tf:"columns,omitempty"`

	// +kubebuilder:validation:Optional
	ShardsCount *float64 `json:"shardsCount,omitempty" tf:"shards_count,omitempty"`

	// +kubebuilder:validation:Optional
	Tables []SharderTransformerTablesParameters `json:"tables,omitempty" tf:"tables,omitempty"`
}

type SharderTransformerTablesObservation struct {
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`
}

type SharderTransformerTablesParameters struct {

	// +kubebuilder:validation:Optional
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	// +kubebuilder:validation:Optional
	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`
}

type TableSplitterTransformerObservation struct {
	Columns []*string `json:"columns,omitempty" tf:"columns,omitempty"`

	Splitter *string `json:"splitter,omitempty" tf:"splitter,omitempty"`

	Tables []TableSplitterTransformerTablesObservation `json:"tables,omitempty" tf:"tables,omitempty"`
}

type TableSplitterTransformerParameters struct {

	// +kubebuilder:validation:Optional
	Columns []*string `json:"columns,omitempty" tf:"columns,omitempty"`

	// +kubebuilder:validation:Optional
	Splitter *string `json:"splitter,omitempty" tf:"splitter,omitempty"`

	// +kubebuilder:validation:Optional
	Tables []TableSplitterTransformerTablesParameters `json:"tables,omitempty" tf:"tables,omitempty"`
}

type TableSplitterTransformerTablesObservation struct {
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`
}

type TableSplitterTransformerTablesParameters struct {

	// +kubebuilder:validation:Optional
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	// +kubebuilder:validation:Optional
	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`
}

type TablesObservation struct {
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`
}

type TablesParameters struct {

	// +kubebuilder:validation:Optional
	ExcludeTables []*string `json:"excludeTables,omitempty" tf:"exclude_tables,omitempty"`

	// +kubebuilder:validation:Optional
	IncludeTables []*string `json:"includeTables,omitempty" tf:"include_tables,omitempty"`
}

type TransferObservation struct {

	// Arbitrary description text for the transfer.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the folder to create the transfer in. If it is not provided, the default provider folder is used.
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// (Computed) Identifier of a new Data Transfer transfer.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A set of key/value label pairs to assign to the Data Transfer transfer.
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Name of the transfer.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Activation action on create a new incremental transfer.
	// It is not part of the transfer parameter and is used only on create.
	// One of "sync_activate", "async_activate", "dont_activate". The default is "sync_activate".
	OnCreateActivateMode *string `json:"onCreateActivateMode,omitempty" tf:"on_create_activate_mode,omitempty"`

	Runtime []RuntimeObservation `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// ID of the source endpoint for the transfer.
	SourceID *string `json:"sourceId,omitempty" tf:"source_id,omitempty"`

	// ID of the target endpoint for the transfer.
	TargetID *string `json:"targetId,omitempty" tf:"target_id,omitempty"`

	Transformation []TransformationObservation `json:"transformation,omitempty" tf:"transformation,omitempty"`

	// Type of the transfer. One of "SNAPSHOT_ONLY", "INCREMENT_ONLY", "SNAPSHOT_AND_INCREMENT".
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// (Computed) Error description if transfer has any errors.
	Warning *string `json:"warning,omitempty" tf:"warning,omitempty"`
}

type TransferParameters struct {

	// Arbitrary description text for the transfer.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// ID of the folder to create the transfer in. If it is not provided, the default provider folder is used.
	// +crossplane:generate:reference:type=github.com/yandex-cloud/provider-jet-yc/apis/resourcemanager/v1alpha1.Folder
	// +kubebuilder:validation:Optional
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// Reference to a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDRef *v1.Reference `json:"folderIdRef,omitempty" tf:"-"`

	// Selector for a Folder in resourcemanager to populate folderId.
	// +kubebuilder:validation:Optional
	FolderIDSelector *v1.Selector `json:"folderIdSelector,omitempty" tf:"-"`

	// A set of key/value label pairs to assign to the Data Transfer transfer.
	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// Name of the transfer.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Activation action on create a new incremental transfer.
	// It is not part of the transfer parameter and is used only on create.
	// One of "sync_activate", "async_activate", "dont_activate". The default is "sync_activate".
	// +kubebuilder:validation:Optional
	OnCreateActivateMode *string `json:"onCreateActivateMode,omitempty" tf:"on_create_activate_mode,omitempty"`

	// +kubebuilder:validation:Optional
	Runtime []RuntimeParameters `json:"runtime,omitempty" tf:"runtime,omitempty"`

	// ID of the source endpoint for the transfer.
	// +crossplane:generate:reference:type=Endpoint
	// +kubebuilder:validation:Optional
	SourceID *string `json:"sourceId,omitempty" tf:"source_id,omitempty"`

	// Reference to a Endpoint to populate sourceId.
	// +kubebuilder:validation:Optional
	SourceIDRef *v1.Reference `json:"sourceIdRef,omitempty" tf:"-"`

	// Selector for a Endpoint to populate sourceId.
	// +kubebuilder:validation:Optional
	SourceIDSelector *v1.Selector `json:"sourceIdSelector,omitempty" tf:"-"`

	// ID of the target endpoint for the transfer.
	// +crossplane:generate:reference:type=Endpoint
	// +kubebuilder:validation:Optional
	TargetID *string `json:"targetId,omitempty" tf:"target_id,omitempty"`

	// Reference to a Endpoint to populate targetId.
	// +kubebuilder:validation:Optional
	TargetIDRef *v1.Reference `json:"targetIdRef,omitempty" tf:"-"`

	// Selector for a Endpoint to populate targetId.
	// +kubebuilder:validation:Optional
	TargetIDSelector *v1.Selector `json:"targetIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Transformation []TransformationParameters `json:"transformation,omitempty" tf:"transformation,omitempty"`

	// Type of the transfer. One of "SNAPSHOT_ONLY", "INCREMENT_ONLY", "SNAPSHOT_AND_INCREMENT".
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TransformationObservation struct {
	Transformers []TransformersObservation `json:"transformers,omitempty" tf:"transformers,omitempty"`
}

type TransformationParameters struct {

	// +kubebuilder:validation:Optional
	Transformers []TransformersParameters `json:"transformers,omitempty" tf:"transformers,omitempty"`
}

type TransformersObservation struct {
	ConvertToString []ConvertToStringObservation `json:"convertToString,omitempty" tf:"convert_to_string,omitempty"`

	FilterColumns []FilterColumnsObservation `json:"filterColumns,omitempty" tf:"filter_columns,omitempty"`

	FilterRows []FilterRowsObservation `json:"filterRows,omitempty" tf:"filter_rows,omitempty"`

	MaskField []MaskFieldObservation `json:"maskField,omitempty" tf:"mask_field,omitempty"`

	RenameTables []RenameTablesObservation `json:"renameTables,omitempty" tf:"rename_tables,omitempty"`

	ReplacePrimaryKey []ReplacePrimaryKeyObservation `json:"replacePrimaryKey,omitempty" tf:"replace_primary_key,omitempty"`

	SharderTransformer []SharderTransformerObservation `json:"sharderTransformer,omitempty" tf:"sharder_transformer,omitempty"`

	TableSplitterTransformer []TableSplitterTransformerObservation `json:"tableSplitterTransformer,omitempty" tf:"table_splitter_transformer,omitempty"`
}

type TransformersParameters struct {

	// +kubebuilder:validation:Optional
	ConvertToString []ConvertToStringParameters `json:"convertToString,omitempty" tf:"convert_to_string,omitempty"`

	// +kubebuilder:validation:Optional
	FilterColumns []FilterColumnsParameters `json:"filterColumns,omitempty" tf:"filter_columns,omitempty"`

	// +kubebuilder:validation:Optional
	FilterRows []FilterRowsParameters `json:"filterRows,omitempty" tf:"filter_rows,omitempty"`

	// +kubebuilder:validation:Optional
	MaskField []MaskFieldParameters `json:"maskField,omitempty" tf:"mask_field,omitempty"`

	// +kubebuilder:validation:Optional
	RenameTables []RenameTablesParameters `json:"renameTables,omitempty" tf:"rename_tables,omitempty"`

	// +kubebuilder:validation:Optional
	ReplacePrimaryKey []ReplacePrimaryKeyParameters `json:"replacePrimaryKey,omitempty" tf:"replace_primary_key,omitempty"`

	// +kubebuilder:validation:Optional
	SharderTransformer []SharderTransformerParameters `json:"sharderTransformer,omitempty" tf:"sharder_transformer,omitempty"`

	// +kubebuilder:validation:Optional
	TableSplitterTransformer []TableSplitterTransformerParameters `json:"tableSplitterTransformer,omitempty" tf:"table_splitter_transformer,omitempty"`
}

type UploadShardParamsObservation struct {
	JobCount *float64 `json:"jobCount,omitempty" tf:"job_count,omitempty"`

	ProcessCount *float64 `json:"processCount,omitempty" tf:"process_count,omitempty"`
}

type UploadShardParamsParameters struct {

	// +kubebuilder:validation:Optional
	JobCount *float64 `json:"jobCount,omitempty" tf:"job_count,omitempty"`

	// +kubebuilder:validation:Optional
	ProcessCount *float64 `json:"processCount,omitempty" tf:"process_count,omitempty"`
}

type YcRuntimeObservation struct {
	JobCount *float64 `json:"jobCount,omitempty" tf:"job_count,omitempty"`

	UploadShardParams []UploadShardParamsObservation `json:"uploadShardParams,omitempty" tf:"upload_shard_params,omitempty"`
}

type YcRuntimeParameters struct {

	// +kubebuilder:validation:Optional
	JobCount *float64 `json:"jobCount,omitempty" tf:"job_count,omitempty"`

	// +kubebuilder:validation:Optional
	UploadShardParams []UploadShardParamsParameters `json:"uploadShardParams,omitempty" tf:"upload_shard_params,omitempty"`
}

// TransferSpec defines the desired state of Transfer
type TransferSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TransferParameters `json:"forProvider"`
}

// TransferStatus defines the observed state of Transfer.
type TransferStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TransferObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Transfer is the Schema for the Transfers API. Manages a Data Transfer transfer within Yandex.Cloud.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type Transfer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TransferSpec   `json:"spec"`
	Status            TransferStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TransferList contains a list of Transfers
type TransferList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Transfer `json:"items"`
}

// Repository type metadata.
var (
	Transfer_Kind             = "Transfer"
	Transfer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Transfer_Kind}.String()
	Transfer_KindAPIVersion   = Transfer_Kind + "." + CRDGroupVersion.String()
	Transfer_GroupVersionKind = CRDGroupVersion.WithKind(Transfer_Kind)
)

func init() {
	SchemeBuilder.Register(&Transfer{}, &TransferList{})
}
