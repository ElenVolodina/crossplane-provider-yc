/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DlqObservation struct {
}

type DlqParameters struct {

	// +kubebuilder:validation:Required
	QueueID *string `json:"queueId" tf:"queue_id,omitempty"`

	// +kubebuilder:validation:Required
	ServiceAccountID *string `json:"serviceAccountId" tf:"service_account_id,omitempty"`
}

type FunctionObservation struct {
}

type FunctionParameters struct {

	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`

	// +kubebuilder:validation:Optional
	RetryAttempts *string `json:"retryAttempts,omitempty" tf:"retry_attempts,omitempty"`

	// +kubebuilder:validation:Optional
	RetryInterval *string `json:"retryInterval,omitempty" tf:"retry_interval,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceAccountID *string `json:"serviceAccountId,omitempty" tf:"service_account_id,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type IotObservation struct {
}

type IotParameters struct {

	// +kubebuilder:validation:Optional
	DeviceID *string `json:"deviceId,omitempty" tf:"device_id,omitempty"`

	// +kubebuilder:validation:Required
	RegistryID *string `json:"registryId" tf:"registry_id,omitempty"`

	// +kubebuilder:validation:Optional
	Topic *string `json:"topic,omitempty" tf:"topic,omitempty"`
}

type LogGroupObservation struct {
}

type LogGroupParameters struct {

	// +kubebuilder:validation:Required
	BatchCutoff *string `json:"batchCutoff" tf:"batch_cutoff,omitempty"`

	// +kubebuilder:validation:Optional
	BatchSize *string `json:"batchSize,omitempty" tf:"batch_size,omitempty"`

	// +kubebuilder:validation:Required
	LogGroupIds []*string `json:"logGroupIds" tf:"log_group_ids,omitempty"`
}

type LoggingObservation struct {
}

type LoggingParameters struct {

	// +kubebuilder:validation:Required
	BatchCutoff *string `json:"batchCutoff" tf:"batch_cutoff,omitempty"`

	// +kubebuilder:validation:Optional
	BatchSize *string `json:"batchSize,omitempty" tf:"batch_size,omitempty"`

	// +kubebuilder:validation:Required
	GroupID *string `json:"groupId" tf:"group_id,omitempty"`

	// +kubebuilder:validation:Required
	Levels []*string `json:"levels" tf:"levels,omitempty"`

	// +kubebuilder:validation:Required
	ResourceIds []*string `json:"resourceIds" tf:"resource_ids,omitempty"`

	// +kubebuilder:validation:Required
	ResourceTypes []*string `json:"resourceTypes" tf:"resource_types,omitempty"`
}

type MessageQueueObservation struct {
}

type MessageQueueParameters struct {

	// +kubebuilder:validation:Required
	BatchCutoff *string `json:"batchCutoff" tf:"batch_cutoff,omitempty"`

	// +kubebuilder:validation:Optional
	BatchSize *string `json:"batchSize,omitempty" tf:"batch_size,omitempty"`

	// +kubebuilder:validation:Required
	QueueID *string `json:"queueId" tf:"queue_id,omitempty"`

	// +kubebuilder:validation:Required
	ServiceAccountID *string `json:"serviceAccountId" tf:"service_account_id,omitempty"`

	// +kubebuilder:validation:Optional
	VisibilityTimeout *string `json:"visibilityTimeout,omitempty" tf:"visibility_timeout,omitempty"`
}

type ObjectStorageObservation struct {
}

type ObjectStorageParameters struct {

	// +kubebuilder:validation:Required
	BucketID *string `json:"bucketId" tf:"bucket_id,omitempty"`

	// +kubebuilder:validation:Optional
	Create *bool `json:"create,omitempty" tf:"create,omitempty"`

	// +kubebuilder:validation:Optional
	Delete *bool `json:"delete,omitempty" tf:"delete,omitempty"`

	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// +kubebuilder:validation:Optional
	Suffix *string `json:"suffix,omitempty" tf:"suffix,omitempty"`

	// +kubebuilder:validation:Optional
	Update *bool `json:"update,omitempty" tf:"update,omitempty"`
}

type TimerObservation struct {
}

type TimerParameters struct {

	// +kubebuilder:validation:Required
	CronExpression *string `json:"cronExpression" tf:"cron_expression,omitempty"`
}

type TriggerObservation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`
}

type TriggerParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Dlq []DlqParameters `json:"dlq,omitempty" tf:"dlq,omitempty"`

	// +kubebuilder:validation:Optional
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// +kubebuilder:validation:Required
	Function []FunctionParameters `json:"function" tf:"function,omitempty"`

	// +kubebuilder:validation:Optional
	Iot []IotParameters `json:"iot,omitempty" tf:"iot,omitempty"`

	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Optional
	LogGroup []LogGroupParameters `json:"logGroup,omitempty" tf:"log_group,omitempty"`

	// +kubebuilder:validation:Optional
	Logging []LoggingParameters `json:"logging,omitempty" tf:"logging,omitempty"`

	// +kubebuilder:validation:Optional
	MessageQueue []MessageQueueParameters `json:"messageQueue,omitempty" tf:"message_queue,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	ObjectStorage []ObjectStorageParameters `json:"objectStorage,omitempty" tf:"object_storage,omitempty"`

	// +kubebuilder:validation:Optional
	Timer []TimerParameters `json:"timer,omitempty" tf:"timer,omitempty"`
}

// TriggerSpec defines the desired state of Trigger
type TriggerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TriggerParameters `json:"forProvider"`
}

// TriggerStatus defines the observed state of Trigger.
type TriggerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TriggerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Trigger is the Schema for the Triggers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloudjet}
type Trigger struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TriggerSpec   `json:"spec"`
	Status            TriggerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TriggerList contains a list of Triggers
type TriggerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Trigger `json:"items"`
}

// Repository type metadata.
var (
	Trigger_Kind             = "Trigger"
	Trigger_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Trigger_Kind}.String()
	Trigger_KindAPIVersion   = Trigger_Kind + "." + CRDGroupVersion.String()
	Trigger_GroupVersionKind = CRDGroupVersion.WithKind(Trigger_Kind)
)

func init() {
	SchemeBuilder.Register(&Trigger{}, &TriggerList{})
}
