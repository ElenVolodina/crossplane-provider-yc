/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SamlFederationObservation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`
}

type SamlFederationParameters struct {

	// +kubebuilder:validation:Optional
	AutoCreateAccountOnLogin *bool `json:"autoCreateAccountOnLogin,omitempty" tf:"auto_create_account_on_login,omitempty"`

	// +kubebuilder:validation:Optional
	CaseInsensitiveNameIds *bool `json:"caseInsensitiveNameIds,omitempty" tf:"case_insensitive_name_ids,omitempty"`

	// +kubebuilder:validation:Optional
	CookieMaxAge *string `json:"cookieMaxAge,omitempty" tf:"cookie_max_age,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Issuer *string `json:"issuer" tf:"issuer,omitempty"`

	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Required
	OrganizationID *string `json:"organizationId" tf:"organization_id,omitempty"`

	// +kubebuilder:validation:Optional
	SecuritySettings []SecuritySettingsParameters `json:"securitySettings,omitempty" tf:"security_settings,omitempty"`

	// +kubebuilder:validation:Required
	SsoBinding *string `json:"ssoBinding" tf:"sso_binding,omitempty"`

	// +kubebuilder:validation:Required
	SsoURL *string `json:"ssoUrl" tf:"sso_url,omitempty"`
}

type SecuritySettingsObservation struct {
}

type SecuritySettingsParameters struct {

	// +kubebuilder:validation:Required
	EncryptedAssertions *bool `json:"encryptedAssertions" tf:"encrypted_assertions,omitempty"`
}

// SamlFederationSpec defines the desired state of SamlFederation
type SamlFederationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SamlFederationParameters `json:"forProvider"`
}

// SamlFederationStatus defines the observed state of SamlFederation.
type SamlFederationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SamlFederationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SamlFederation is the Schema for the SamlFederations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloudjet}
type SamlFederation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SamlFederationSpec   `json:"spec"`
	Status            SamlFederationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SamlFederationList contains a list of SamlFederations
type SamlFederationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SamlFederation `json:"items"`
}

// Repository type metadata.
var (
	SamlFederation_Kind             = "SamlFederation"
	SamlFederation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SamlFederation_Kind}.String()
	SamlFederation_KindAPIVersion   = SamlFederation_Kind + "." + CRDGroupVersion.String()
	SamlFederation_GroupVersionKind = CRDGroupVersion.WithKind(SamlFederation_Kind)
)

func init() {
	SchemeBuilder.Register(&SamlFederation{}, &SamlFederationList{})
}
