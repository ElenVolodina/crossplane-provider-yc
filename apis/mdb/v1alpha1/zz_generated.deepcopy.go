// +build !ignore_autogenerated

/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccessObservation) DeepCopyInto(out *AccessObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccessObservation.
func (in *AccessObservation) DeepCopy() *AccessObservation {
	if in == nil {
		return nil
	}
	out := new(AccessObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *AccessParameters) DeepCopyInto(out *AccessParameters) {
	*out = *in
	if in.DataLens != nil {
		in, out := &in.DataLens, &out.DataLens
		*out = new(bool)
		**out = **in
	}
	if in.Metrika != nil {
		in, out := &in.Metrika, &out.Metrika
		*out = new(bool)
		**out = **in
	}
	if in.Serverless != nil {
		in, out := &in.Serverless, &out.Serverless
		*out = new(bool)
		**out = **in
	}
	if in.WebSQL != nil {
		in, out := &in.WebSQL, &out.WebSQL
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new AccessParameters.
func (in *AccessParameters) DeepCopy() *AccessParameters {
	if in == nil {
		return nil
	}
	out := new(AccessParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupWindowStartObservation) DeepCopyInto(out *BackupWindowStartObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupWindowStartObservation.
func (in *BackupWindowStartObservation) DeepCopy() *BackupWindowStartObservation {
	if in == nil {
		return nil
	}
	out := new(BackupWindowStartObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *BackupWindowStartParameters) DeepCopyInto(out *BackupWindowStartParameters) {
	*out = *in
	if in.Hours != nil {
		in, out := &in.Hours, &out.Hours
		*out = new(int64)
		**out = **in
	}
	if in.Minutes != nil {
		in, out := &in.Minutes, &out.Minutes
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new BackupWindowStartParameters.
func (in *BackupWindowStartParameters) DeepCopy() *BackupWindowStartParameters {
	if in == nil {
		return nil
	}
	out := new(BackupWindowStartParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClickhouseCluster) DeepCopyInto(out *ClickhouseCluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClickhouseCluster.
func (in *ClickhouseCluster) DeepCopy() *ClickhouseCluster {
	if in == nil {
		return nil
	}
	out := new(ClickhouseCluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ClickhouseCluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClickhouseClusterList) DeepCopyInto(out *ClickhouseClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ClickhouseCluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClickhouseClusterList.
func (in *ClickhouseClusterList) DeepCopy() *ClickhouseClusterList {
	if in == nil {
		return nil
	}
	out := new(ClickhouseClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ClickhouseClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClickhouseClusterObservation) DeepCopyInto(out *ClickhouseClusterObservation) {
	*out = *in
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.Health != nil {
		in, out := &in.Health, &out.Health
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClickhouseClusterObservation.
func (in *ClickhouseClusterObservation) DeepCopy() *ClickhouseClusterObservation {
	if in == nil {
		return nil
	}
	out := new(ClickhouseClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClickhouseClusterParameters) DeepCopyInto(out *ClickhouseClusterParameters) {
	*out = *in
	if in.Access != nil {
		in, out := &in.Access, &out.Access
		*out = make([]AccessParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AdminPasswordSecretRef != nil {
		in, out := &in.AdminPasswordSecretRef, &out.AdminPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.BackupWindowStart != nil {
		in, out := &in.BackupWindowStart, &out.BackupWindowStart
		*out = make([]BackupWindowStartParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Clickhouse != nil {
		in, out := &in.Clickhouse, &out.Clickhouse
		*out = make([]ClickhouseParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CloudStorage != nil {
		in, out := &in.CloudStorage, &out.CloudStorage
		*out = make([]CloudStorageParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.CopySchemaOnNewHosts != nil {
		in, out := &in.CopySchemaOnNewHosts, &out.CopySchemaOnNewHosts
		*out = new(bool)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = make([]DatabaseParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.FormatSchema != nil {
		in, out := &in.FormatSchema, &out.FormatSchema
		*out = make([]FormatSchemaParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]HostParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]MaintenanceWindowParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MlModel != nil {
		in, out := &in.MlModel, &out.MlModel
		*out = make([]MlModelParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.SQLDatabaseManagement != nil {
		in, out := &in.SQLDatabaseManagement, &out.SQLDatabaseManagement
		*out = new(bool)
		**out = **in
	}
	if in.SQLUserManagement != nil {
		in, out := &in.SQLUserManagement, &out.SQLUserManagement
		*out = new(bool)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ServiceAccountID != nil {
		in, out := &in.ServiceAccountID, &out.ServiceAccountID
		*out = new(string)
		**out = **in
	}
	if in.ShardGroup != nil {
		in, out := &in.ShardGroup, &out.ShardGroup
		*out = make([]ShardGroupParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = make([]UserParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.Zookeeper != nil {
		in, out := &in.Zookeeper, &out.Zookeeper
		*out = make([]ZookeeperParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClickhouseClusterParameters.
func (in *ClickhouseClusterParameters) DeepCopy() *ClickhouseClusterParameters {
	if in == nil {
		return nil
	}
	out := new(ClickhouseClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClickhouseClusterSpec) DeepCopyInto(out *ClickhouseClusterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClickhouseClusterSpec.
func (in *ClickhouseClusterSpec) DeepCopy() *ClickhouseClusterSpec {
	if in == nil {
		return nil
	}
	out := new(ClickhouseClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClickhouseClusterStatus) DeepCopyInto(out *ClickhouseClusterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClickhouseClusterStatus.
func (in *ClickhouseClusterStatus) DeepCopy() *ClickhouseClusterStatus {
	if in == nil {
		return nil
	}
	out := new(ClickhouseClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClickhouseObservation) DeepCopyInto(out *ClickhouseObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClickhouseObservation.
func (in *ClickhouseObservation) DeepCopy() *ClickhouseObservation {
	if in == nil {
		return nil
	}
	out := new(ClickhouseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClickhouseParameters) DeepCopyInto(out *ClickhouseParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make([]ConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]ResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClickhouseParameters.
func (in *ClickhouseParameters) DeepCopy() *ClickhouseParameters {
	if in == nil {
		return nil
	}
	out := new(ClickhouseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CloudStorageObservation) DeepCopyInto(out *CloudStorageObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CloudStorageObservation.
func (in *CloudStorageObservation) DeepCopy() *CloudStorageObservation {
	if in == nil {
		return nil
	}
	out := new(CloudStorageObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CloudStorageParameters) DeepCopyInto(out *CloudStorageParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CloudStorageParameters.
func (in *CloudStorageParameters) DeepCopy() *CloudStorageParameters {
	if in == nil {
		return nil
	}
	out := new(CloudStorageParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterConfigAccessObservation) DeepCopyInto(out *ClusterConfigAccessObservation) {
	*out = *in
	if in.DataLens != nil {
		in, out := &in.DataLens, &out.DataLens
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterConfigAccessObservation.
func (in *ClusterConfigAccessObservation) DeepCopy() *ClusterConfigAccessObservation {
	if in == nil {
		return nil
	}
	out := new(ClusterConfigAccessObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterConfigAccessParameters) DeepCopyInto(out *ClusterConfigAccessParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterConfigAccessParameters.
func (in *ClusterConfigAccessParameters) DeepCopy() *ClusterConfigAccessParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterConfigAccessParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterConfigBackupWindowStartObservation) DeepCopyInto(out *ClusterConfigBackupWindowStartObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterConfigBackupWindowStartObservation.
func (in *ClusterConfigBackupWindowStartObservation) DeepCopy() *ClusterConfigBackupWindowStartObservation {
	if in == nil {
		return nil
	}
	out := new(ClusterConfigBackupWindowStartObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterConfigBackupWindowStartParameters) DeepCopyInto(out *ClusterConfigBackupWindowStartParameters) {
	*out = *in
	if in.Hours != nil {
		in, out := &in.Hours, &out.Hours
		*out = new(int64)
		**out = **in
	}
	if in.Minutes != nil {
		in, out := &in.Minutes, &out.Minutes
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterConfigBackupWindowStartParameters.
func (in *ClusterConfigBackupWindowStartParameters) DeepCopy() *ClusterConfigBackupWindowStartParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterConfigBackupWindowStartParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterConfigObservation) DeepCopyInto(out *ClusterConfigObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterConfigObservation.
func (in *ClusterConfigObservation) DeepCopy() *ClusterConfigObservation {
	if in == nil {
		return nil
	}
	out := new(ClusterConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ClusterConfigParameters) DeepCopyInto(out *ClusterConfigParameters) {
	*out = *in
	if in.Access != nil {
		in, out := &in.Access, &out.Access
		*out = make([]ClusterConfigAccessParameters, len(*in))
		copy(*out, *in)
	}
	if in.BackupWindowStart != nil {
		in, out := &in.BackupWindowStart, &out.BackupWindowStart
		*out = make([]ClusterConfigBackupWindowStartParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.FeatureCompatibilityVersion != nil {
		in, out := &in.FeatureCompatibilityVersion, &out.FeatureCompatibilityVersion
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ClusterConfigParameters.
func (in *ClusterConfigParameters) DeepCopy() *ClusterConfigParameters {
	if in == nil {
		return nil
	}
	out := new(ClusterConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CompressionObservation) DeepCopyInto(out *CompressionObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CompressionObservation.
func (in *CompressionObservation) DeepCopy() *CompressionObservation {
	if in == nil {
		return nil
	}
	out := new(CompressionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *CompressionParameters) DeepCopyInto(out *CompressionParameters) {
	*out = *in
	if in.Method != nil {
		in, out := &in.Method, &out.Method
		*out = new(string)
		**out = **in
	}
	if in.MinPartSize != nil {
		in, out := &in.MinPartSize, &out.MinPartSize
		*out = new(int64)
		**out = **in
	}
	if in.MinPartSizeRatio != nil {
		in, out := &in.MinPartSizeRatio, &out.MinPartSizeRatio
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new CompressionParameters.
func (in *CompressionParameters) DeepCopy() *CompressionParameters {
	if in == nil {
		return nil
	}
	out := new(CompressionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigAccessObservation) DeepCopyInto(out *ConfigAccessObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigAccessObservation.
func (in *ConfigAccessObservation) DeepCopy() *ConfigAccessObservation {
	if in == nil {
		return nil
	}
	out := new(ConfigAccessObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigAccessParameters) DeepCopyInto(out *ConfigAccessParameters) {
	*out = *in
	if in.DataLens != nil {
		in, out := &in.DataLens, &out.DataLens
		*out = new(bool)
		**out = **in
	}
	if in.WebSQL != nil {
		in, out := &in.WebSQL, &out.WebSQL
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigAccessParameters.
func (in *ConfigAccessParameters) DeepCopy() *ConfigAccessParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigAccessParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigBackupWindowStartObservation) DeepCopyInto(out *ConfigBackupWindowStartObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigBackupWindowStartObservation.
func (in *ConfigBackupWindowStartObservation) DeepCopy() *ConfigBackupWindowStartObservation {
	if in == nil {
		return nil
	}
	out := new(ConfigBackupWindowStartObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigBackupWindowStartParameters) DeepCopyInto(out *ConfigBackupWindowStartParameters) {
	*out = *in
	if in.Hours != nil {
		in, out := &in.Hours, &out.Hours
		*out = new(int64)
		**out = **in
	}
	if in.Minutes != nil {
		in, out := &in.Minutes, &out.Minutes
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigBackupWindowStartParameters.
func (in *ConfigBackupWindowStartParameters) DeepCopy() *ConfigBackupWindowStartParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigBackupWindowStartParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigKafkaObservation) DeepCopyInto(out *ConfigKafkaObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigKafkaObservation.
func (in *ConfigKafkaObservation) DeepCopy() *ConfigKafkaObservation {
	if in == nil {
		return nil
	}
	out := new(ConfigKafkaObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigKafkaParameters) DeepCopyInto(out *ConfigKafkaParameters) {
	*out = *in
	if in.KafkaConfig != nil {
		in, out := &in.KafkaConfig, &out.KafkaConfig
		*out = make([]KafkaConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]KafkaResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigKafkaParameters.
func (in *ConfigKafkaParameters) DeepCopy() *ConfigKafkaParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigKafkaParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigObservation) DeepCopyInto(out *ConfigObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigObservation.
func (in *ConfigObservation) DeepCopy() *ConfigObservation {
	if in == nil {
		return nil
	}
	out := new(ConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigParameters) DeepCopyInto(out *ConfigParameters) {
	*out = *in
	if in.BackgroundPoolSize != nil {
		in, out := &in.BackgroundPoolSize, &out.BackgroundPoolSize
		*out = new(int64)
		**out = **in
	}
	if in.BackgroundSchedulePoolSize != nil {
		in, out := &in.BackgroundSchedulePoolSize, &out.BackgroundSchedulePoolSize
		*out = new(int64)
		**out = **in
	}
	if in.Compression != nil {
		in, out := &in.Compression, &out.Compression
		*out = make([]CompressionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.GeobaseURI != nil {
		in, out := &in.GeobaseURI, &out.GeobaseURI
		*out = new(string)
		**out = **in
	}
	if in.GraphiteRollup != nil {
		in, out := &in.GraphiteRollup, &out.GraphiteRollup
		*out = make([]GraphiteRollupParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Kafka != nil {
		in, out := &in.Kafka, &out.Kafka
		*out = make([]KafkaParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.KafkaTopic != nil {
		in, out := &in.KafkaTopic, &out.KafkaTopic
		*out = make([]KafkaTopicParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.KeepAliveTimeout != nil {
		in, out := &in.KeepAliveTimeout, &out.KeepAliveTimeout
		*out = new(int64)
		**out = **in
	}
	if in.LogLevel != nil {
		in, out := &in.LogLevel, &out.LogLevel
		*out = new(string)
		**out = **in
	}
	if in.MarkCacheSize != nil {
		in, out := &in.MarkCacheSize, &out.MarkCacheSize
		*out = new(int64)
		**out = **in
	}
	if in.MaxConcurrentQueries != nil {
		in, out := &in.MaxConcurrentQueries, &out.MaxConcurrentQueries
		*out = new(int64)
		**out = **in
	}
	if in.MaxConnections != nil {
		in, out := &in.MaxConnections, &out.MaxConnections
		*out = new(int64)
		**out = **in
	}
	if in.MaxPartitionSizeToDrop != nil {
		in, out := &in.MaxPartitionSizeToDrop, &out.MaxPartitionSizeToDrop
		*out = new(int64)
		**out = **in
	}
	if in.MaxTableSizeToDrop != nil {
		in, out := &in.MaxTableSizeToDrop, &out.MaxTableSizeToDrop
		*out = new(int64)
		**out = **in
	}
	if in.MergeTree != nil {
		in, out := &in.MergeTree, &out.MergeTree
		*out = make([]MergeTreeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MetricLogEnabled != nil {
		in, out := &in.MetricLogEnabled, &out.MetricLogEnabled
		*out = new(bool)
		**out = **in
	}
	if in.MetricLogRetentionSize != nil {
		in, out := &in.MetricLogRetentionSize, &out.MetricLogRetentionSize
		*out = new(int64)
		**out = **in
	}
	if in.MetricLogRetentionTime != nil {
		in, out := &in.MetricLogRetentionTime, &out.MetricLogRetentionTime
		*out = new(int64)
		**out = **in
	}
	if in.PartLogRetentionSize != nil {
		in, out := &in.PartLogRetentionSize, &out.PartLogRetentionSize
		*out = new(int64)
		**out = **in
	}
	if in.PartLogRetentionTime != nil {
		in, out := &in.PartLogRetentionTime, &out.PartLogRetentionTime
		*out = new(int64)
		**out = **in
	}
	if in.QueryLogRetentionSize != nil {
		in, out := &in.QueryLogRetentionSize, &out.QueryLogRetentionSize
		*out = new(int64)
		**out = **in
	}
	if in.QueryLogRetentionTime != nil {
		in, out := &in.QueryLogRetentionTime, &out.QueryLogRetentionTime
		*out = new(int64)
		**out = **in
	}
	if in.QueryThreadLogEnabled != nil {
		in, out := &in.QueryThreadLogEnabled, &out.QueryThreadLogEnabled
		*out = new(bool)
		**out = **in
	}
	if in.QueryThreadLogRetentionSize != nil {
		in, out := &in.QueryThreadLogRetentionSize, &out.QueryThreadLogRetentionSize
		*out = new(int64)
		**out = **in
	}
	if in.QueryThreadLogRetentionTime != nil {
		in, out := &in.QueryThreadLogRetentionTime, &out.QueryThreadLogRetentionTime
		*out = new(int64)
		**out = **in
	}
	if in.Rabbitmq != nil {
		in, out := &in.Rabbitmq, &out.Rabbitmq
		*out = make([]RabbitmqParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.TextLogEnabled != nil {
		in, out := &in.TextLogEnabled, &out.TextLogEnabled
		*out = new(bool)
		**out = **in
	}
	if in.TextLogLevel != nil {
		in, out := &in.TextLogLevel, &out.TextLogLevel
		*out = new(string)
		**out = **in
	}
	if in.TextLogRetentionSize != nil {
		in, out := &in.TextLogRetentionSize, &out.TextLogRetentionSize
		*out = new(int64)
		**out = **in
	}
	if in.TextLogRetentionTime != nil {
		in, out := &in.TextLogRetentionTime, &out.TextLogRetentionTime
		*out = new(int64)
		**out = **in
	}
	if in.Timezone != nil {
		in, out := &in.Timezone, &out.Timezone
		*out = new(string)
		**out = **in
	}
	if in.TraceLogEnabled != nil {
		in, out := &in.TraceLogEnabled, &out.TraceLogEnabled
		*out = new(bool)
		**out = **in
	}
	if in.TraceLogRetentionSize != nil {
		in, out := &in.TraceLogRetentionSize, &out.TraceLogRetentionSize
		*out = new(int64)
		**out = **in
	}
	if in.TraceLogRetentionTime != nil {
		in, out := &in.TraceLogRetentionTime, &out.TraceLogRetentionTime
		*out = new(int64)
		**out = **in
	}
	if in.UncompressedCacheSize != nil {
		in, out := &in.UncompressedCacheSize, &out.UncompressedCacheSize
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigParameters.
func (in *ConfigParameters) DeepCopy() *ConfigParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigResourcesObservation) DeepCopyInto(out *ConfigResourcesObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigResourcesObservation.
func (in *ConfigResourcesObservation) DeepCopy() *ConfigResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(ConfigResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigResourcesParameters) DeepCopyInto(out *ConfigResourcesParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigResourcesParameters.
func (in *ConfigResourcesParameters) DeepCopy() *ConfigResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigResourcesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigZookeeperObservation) DeepCopyInto(out *ConfigZookeeperObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigZookeeperObservation.
func (in *ConfigZookeeperObservation) DeepCopy() *ConfigZookeeperObservation {
	if in == nil {
		return nil
	}
	out := new(ConfigZookeeperObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigZookeeperParameters) DeepCopyInto(out *ConfigZookeeperParameters) {
	*out = *in
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]ConfigZookeeperResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigZookeeperParameters.
func (in *ConfigZookeeperParameters) DeepCopy() *ConfigZookeeperParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigZookeeperParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigZookeeperResourcesObservation) DeepCopyInto(out *ConfigZookeeperResourcesObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigZookeeperResourcesObservation.
func (in *ConfigZookeeperResourcesObservation) DeepCopy() *ConfigZookeeperResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(ConfigZookeeperResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConfigZookeeperResourcesParameters) DeepCopyInto(out *ConfigZookeeperResourcesParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConfigZookeeperResourcesParameters.
func (in *ConfigZookeeperResourcesParameters) DeepCopy() *ConfigZookeeperResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(ConfigZookeeperResourcesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectionLimitsObservation) DeepCopyInto(out *ConnectionLimitsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectionLimitsObservation.
func (in *ConnectionLimitsObservation) DeepCopy() *ConnectionLimitsObservation {
	if in == nil {
		return nil
	}
	out := new(ConnectionLimitsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ConnectionLimitsParameters) DeepCopyInto(out *ConnectionLimitsParameters) {
	*out = *in
	if in.MaxConnectionsPerHour != nil {
		in, out := &in.MaxConnectionsPerHour, &out.MaxConnectionsPerHour
		*out = new(int64)
		**out = **in
	}
	if in.MaxQuestionsPerHour != nil {
		in, out := &in.MaxQuestionsPerHour, &out.MaxQuestionsPerHour
		*out = new(int64)
		**out = **in
	}
	if in.MaxUpdatesPerHour != nil {
		in, out := &in.MaxUpdatesPerHour, &out.MaxUpdatesPerHour
		*out = new(int64)
		**out = **in
	}
	if in.MaxUserConnections != nil {
		in, out := &in.MaxUserConnections, &out.MaxUserConnections
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ConnectionLimitsParameters.
func (in *ConnectionLimitsParameters) DeepCopy() *ConnectionLimitsParameters {
	if in == nil {
		return nil
	}
	out := new(ConnectionLimitsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataNodeObservation) DeepCopyInto(out *DataNodeObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataNodeObservation.
func (in *DataNodeObservation) DeepCopy() *DataNodeObservation {
	if in == nil {
		return nil
	}
	out := new(DataNodeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataNodeParameters) DeepCopyInto(out *DataNodeParameters) {
	*out = *in
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]DataNodeResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataNodeParameters.
func (in *DataNodeParameters) DeepCopy() *DataNodeParameters {
	if in == nil {
		return nil
	}
	out := new(DataNodeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataNodeResourcesObservation) DeepCopyInto(out *DataNodeResourcesObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataNodeResourcesObservation.
func (in *DataNodeResourcesObservation) DeepCopy() *DataNodeResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(DataNodeResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DataNodeResourcesParameters) DeepCopyInto(out *DataNodeResourcesParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DataNodeResourcesParameters.
func (in *DataNodeResourcesParameters) DeepCopy() *DataNodeResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(DataNodeResourcesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseObservation) DeepCopyInto(out *DatabaseObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseObservation.
func (in *DatabaseObservation) DeepCopy() *DatabaseObservation {
	if in == nil {
		return nil
	}
	out := new(DatabaseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseParameters) DeepCopyInto(out *DatabaseParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseParameters.
func (in *DatabaseParameters) DeepCopy() *DatabaseParameters {
	if in == nil {
		return nil
	}
	out := new(DatabaseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchCluster) DeepCopyInto(out *ElasticsearchCluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchCluster.
func (in *ElasticsearchCluster) DeepCopy() *ElasticsearchCluster {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchCluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ElasticsearchCluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchClusterConfigObservation) DeepCopyInto(out *ElasticsearchClusterConfigObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchClusterConfigObservation.
func (in *ElasticsearchClusterConfigObservation) DeepCopy() *ElasticsearchClusterConfigObservation {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchClusterConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchClusterConfigParameters) DeepCopyInto(out *ElasticsearchClusterConfigParameters) {
	*out = *in
	out.AdminPasswordSecretRef = in.AdminPasswordSecretRef
	if in.DataNode != nil {
		in, out := &in.DataNode, &out.DataNode
		*out = make([]DataNodeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Edition != nil {
		in, out := &in.Edition, &out.Edition
		*out = new(string)
		**out = **in
	}
	if in.MasterNode != nil {
		in, out := &in.MasterNode, &out.MasterNode
		*out = make([]MasterNodeParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Plugins != nil {
		in, out := &in.Plugins, &out.Plugins
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchClusterConfigParameters.
func (in *ElasticsearchClusterConfigParameters) DeepCopy() *ElasticsearchClusterConfigParameters {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchClusterConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchClusterHostObservation) DeepCopyInto(out *ElasticsearchClusterHostObservation) {
	*out = *in
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchClusterHostObservation.
func (in *ElasticsearchClusterHostObservation) DeepCopy() *ElasticsearchClusterHostObservation {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchClusterHostObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchClusterHostParameters) DeepCopyInto(out *ElasticsearchClusterHostParameters) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchClusterHostParameters.
func (in *ElasticsearchClusterHostParameters) DeepCopy() *ElasticsearchClusterHostParameters {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchClusterHostParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchClusterList) DeepCopyInto(out *ElasticsearchClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]ElasticsearchCluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchClusterList.
func (in *ElasticsearchClusterList) DeepCopy() *ElasticsearchClusterList {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *ElasticsearchClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchClusterObservation) DeepCopyInto(out *ElasticsearchClusterObservation) {
	*out = *in
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.Health != nil {
		in, out := &in.Health, &out.Health
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchClusterObservation.
func (in *ElasticsearchClusterObservation) DeepCopy() *ElasticsearchClusterObservation {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchClusterParameters) DeepCopyInto(out *ElasticsearchClusterParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make([]ElasticsearchClusterConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]ElasticsearchClusterHostParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ServiceAccountID != nil {
		in, out := &in.ServiceAccountID, &out.ServiceAccountID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchClusterParameters.
func (in *ElasticsearchClusterParameters) DeepCopy() *ElasticsearchClusterParameters {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchClusterSpec) DeepCopyInto(out *ElasticsearchClusterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchClusterSpec.
func (in *ElasticsearchClusterSpec) DeepCopy() *ElasticsearchClusterSpec {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ElasticsearchClusterStatus) DeepCopyInto(out *ElasticsearchClusterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ElasticsearchClusterStatus.
func (in *ElasticsearchClusterStatus) DeepCopy() *ElasticsearchClusterStatus {
	if in == nil {
		return nil
	}
	out := new(ElasticsearchClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtensionObservation) DeepCopyInto(out *ExtensionObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtensionObservation.
func (in *ExtensionObservation) DeepCopy() *ExtensionObservation {
	if in == nil {
		return nil
	}
	out := new(ExtensionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ExtensionParameters) DeepCopyInto(out *ExtensionParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ExtensionParameters.
func (in *ExtensionParameters) DeepCopy() *ExtensionParameters {
	if in == nil {
		return nil
	}
	out := new(ExtensionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FormatSchemaObservation) DeepCopyInto(out *FormatSchemaObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FormatSchemaObservation.
func (in *FormatSchemaObservation) DeepCopy() *FormatSchemaObservation {
	if in == nil {
		return nil
	}
	out := new(FormatSchemaObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FormatSchemaParameters) DeepCopyInto(out *FormatSchemaParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.URI != nil {
		in, out := &in.URI, &out.URI
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FormatSchemaParameters.
func (in *FormatSchemaParameters) DeepCopy() *FormatSchemaParameters {
	if in == nil {
		return nil
	}
	out := new(FormatSchemaParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GraphiteRollupObservation) DeepCopyInto(out *GraphiteRollupObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GraphiteRollupObservation.
func (in *GraphiteRollupObservation) DeepCopy() *GraphiteRollupObservation {
	if in == nil {
		return nil
	}
	out := new(GraphiteRollupObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GraphiteRollupParameters) DeepCopyInto(out *GraphiteRollupParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Pattern != nil {
		in, out := &in.Pattern, &out.Pattern
		*out = make([]PatternParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GraphiteRollupParameters.
func (in *GraphiteRollupParameters) DeepCopy() *GraphiteRollupParameters {
	if in == nil {
		return nil
	}
	out := new(GraphiteRollupParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GreenplumCluster) DeepCopyInto(out *GreenplumCluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GreenplumCluster.
func (in *GreenplumCluster) DeepCopy() *GreenplumCluster {
	if in == nil {
		return nil
	}
	out := new(GreenplumCluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GreenplumCluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GreenplumClusterAccessObservation) DeepCopyInto(out *GreenplumClusterAccessObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GreenplumClusterAccessObservation.
func (in *GreenplumClusterAccessObservation) DeepCopy() *GreenplumClusterAccessObservation {
	if in == nil {
		return nil
	}
	out := new(GreenplumClusterAccessObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GreenplumClusterAccessParameters) DeepCopyInto(out *GreenplumClusterAccessParameters) {
	*out = *in
	if in.DataLens != nil {
		in, out := &in.DataLens, &out.DataLens
		*out = new(bool)
		**out = **in
	}
	if in.WebSQL != nil {
		in, out := &in.WebSQL, &out.WebSQL
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GreenplumClusterAccessParameters.
func (in *GreenplumClusterAccessParameters) DeepCopy() *GreenplumClusterAccessParameters {
	if in == nil {
		return nil
	}
	out := new(GreenplumClusterAccessParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GreenplumClusterBackupWindowStartObservation) DeepCopyInto(out *GreenplumClusterBackupWindowStartObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GreenplumClusterBackupWindowStartObservation.
func (in *GreenplumClusterBackupWindowStartObservation) DeepCopy() *GreenplumClusterBackupWindowStartObservation {
	if in == nil {
		return nil
	}
	out := new(GreenplumClusterBackupWindowStartObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GreenplumClusterBackupWindowStartParameters) DeepCopyInto(out *GreenplumClusterBackupWindowStartParameters) {
	*out = *in
	if in.Hours != nil {
		in, out := &in.Hours, &out.Hours
		*out = new(int64)
		**out = **in
	}
	if in.Minutes != nil {
		in, out := &in.Minutes, &out.Minutes
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GreenplumClusterBackupWindowStartParameters.
func (in *GreenplumClusterBackupWindowStartParameters) DeepCopy() *GreenplumClusterBackupWindowStartParameters {
	if in == nil {
		return nil
	}
	out := new(GreenplumClusterBackupWindowStartParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GreenplumClusterList) DeepCopyInto(out *GreenplumClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]GreenplumCluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GreenplumClusterList.
func (in *GreenplumClusterList) DeepCopy() *GreenplumClusterList {
	if in == nil {
		return nil
	}
	out := new(GreenplumClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *GreenplumClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GreenplumClusterObservation) DeepCopyInto(out *GreenplumClusterObservation) {
	*out = *in
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.Health != nil {
		in, out := &in.Health, &out.Health
		*out = new(string)
		**out = **in
	}
	if in.MasterHosts != nil {
		in, out := &in.MasterHosts, &out.MasterHosts
		*out = make([]MasterHostsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SegmentHosts != nil {
		in, out := &in.SegmentHosts, &out.SegmentHosts
		*out = make([]SegmentHostsObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GreenplumClusterObservation.
func (in *GreenplumClusterObservation) DeepCopy() *GreenplumClusterObservation {
	if in == nil {
		return nil
	}
	out := new(GreenplumClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GreenplumClusterParameters) DeepCopyInto(out *GreenplumClusterParameters) {
	*out = *in
	if in.Access != nil {
		in, out := &in.Access, &out.Access
		*out = make([]GreenplumClusterAccessParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.BackupWindowStart != nil {
		in, out := &in.BackupWindowStart, &out.BackupWindowStart
		*out = make([]GreenplumClusterBackupWindowStartParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MasterHostCount != nil {
		in, out := &in.MasterHostCount, &out.MasterHostCount
		*out = new(int64)
		**out = **in
	}
	if in.MasterSubcluster != nil {
		in, out := &in.MasterSubcluster, &out.MasterSubcluster
		*out = make([]MasterSubclusterParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SegmentHostCount != nil {
		in, out := &in.SegmentHostCount, &out.SegmentHostCount
		*out = new(int64)
		**out = **in
	}
	if in.SegmentInHost != nil {
		in, out := &in.SegmentInHost, &out.SegmentInHost
		*out = new(int64)
		**out = **in
	}
	if in.SegmentSubcluster != nil {
		in, out := &in.SegmentSubcluster, &out.SegmentSubcluster
		*out = make([]SegmentSubclusterParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.UserName != nil {
		in, out := &in.UserName, &out.UserName
		*out = new(string)
		**out = **in
	}
	out.UserPasswordSecretRef = in.UserPasswordSecretRef
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GreenplumClusterParameters.
func (in *GreenplumClusterParameters) DeepCopy() *GreenplumClusterParameters {
	if in == nil {
		return nil
	}
	out := new(GreenplumClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GreenplumClusterSpec) DeepCopyInto(out *GreenplumClusterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GreenplumClusterSpec.
func (in *GreenplumClusterSpec) DeepCopy() *GreenplumClusterSpec {
	if in == nil {
		return nil
	}
	out := new(GreenplumClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *GreenplumClusterStatus) DeepCopyInto(out *GreenplumClusterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new GreenplumClusterStatus.
func (in *GreenplumClusterStatus) DeepCopy() *GreenplumClusterStatus {
	if in == nil {
		return nil
	}
	out := new(GreenplumClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostObservation) DeepCopyInto(out *HostObservation) {
	*out = *in
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostObservation.
func (in *HostObservation) DeepCopy() *HostObservation {
	if in == nil {
		return nil
	}
	out := new(HostObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *HostParameters) DeepCopyInto(out *HostParameters) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.ShardName != nil {
		in, out := &in.ShardName, &out.ShardName
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new HostParameters.
func (in *HostParameters) DeepCopy() *HostParameters {
	if in == nil {
		return nil
	}
	out := new(HostParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaCluster) DeepCopyInto(out *KafkaCluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaCluster.
func (in *KafkaCluster) DeepCopy() *KafkaCluster {
	if in == nil {
		return nil
	}
	out := new(KafkaCluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KafkaCluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterConfigObservation) DeepCopyInto(out *KafkaClusterConfigObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterConfigObservation.
func (in *KafkaClusterConfigObservation) DeepCopy() *KafkaClusterConfigObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterConfigParameters) DeepCopyInto(out *KafkaClusterConfigParameters) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.BrokersCount != nil {
		in, out := &in.BrokersCount, &out.BrokersCount
		*out = new(int64)
		**out = **in
	}
	if in.Kafka != nil {
		in, out := &in.Kafka, &out.Kafka
		*out = make([]ConfigKafkaParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SchemaRegistry != nil {
		in, out := &in.SchemaRegistry, &out.SchemaRegistry
		*out = new(bool)
		**out = **in
	}
	if in.UnmanagedTopics != nil {
		in, out := &in.UnmanagedTopics, &out.UnmanagedTopics
		*out = new(bool)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
	if in.Zones != nil {
		in, out := &in.Zones, &out.Zones
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Zookeeper != nil {
		in, out := &in.Zookeeper, &out.Zookeeper
		*out = make([]ConfigZookeeperParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterConfigParameters.
func (in *KafkaClusterConfigParameters) DeepCopy() *KafkaClusterConfigParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterHostObservation) DeepCopyInto(out *KafkaClusterHostObservation) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.Health != nil {
		in, out := &in.Health, &out.Health
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.ZoneID != nil {
		in, out := &in.ZoneID, &out.ZoneID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterHostObservation.
func (in *KafkaClusterHostObservation) DeepCopy() *KafkaClusterHostObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterHostObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterHostParameters) DeepCopyInto(out *KafkaClusterHostParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterHostParameters.
func (in *KafkaClusterHostParameters) DeepCopy() *KafkaClusterHostParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterHostParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterList) DeepCopyInto(out *KafkaClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KafkaCluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterList.
func (in *KafkaClusterList) DeepCopy() *KafkaClusterList {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KafkaClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterObservation) DeepCopyInto(out *KafkaClusterObservation) {
	*out = *in
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.Health != nil {
		in, out := &in.Health, &out.Health
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]KafkaClusterHostObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterObservation.
func (in *KafkaClusterObservation) DeepCopy() *KafkaClusterObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterParameters) DeepCopyInto(out *KafkaClusterParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make([]KafkaClusterConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.HostGroupIds != nil {
		in, out := &in.HostGroupIds, &out.HostGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SubnetIds != nil {
		in, out := &in.SubnetIds, &out.SubnetIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Topic != nil {
		in, out := &in.Topic, &out.Topic
		*out = make([]TopicParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = make([]KafkaClusterUserParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterParameters.
func (in *KafkaClusterParameters) DeepCopy() *KafkaClusterParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterSpec) DeepCopyInto(out *KafkaClusterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterSpec.
func (in *KafkaClusterSpec) DeepCopy() *KafkaClusterSpec {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterStatus) DeepCopyInto(out *KafkaClusterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterStatus.
func (in *KafkaClusterStatus) DeepCopy() *KafkaClusterStatus {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterUserObservation) DeepCopyInto(out *KafkaClusterUserObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterUserObservation.
func (in *KafkaClusterUserObservation) DeepCopy() *KafkaClusterUserObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterUserObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaClusterUserParameters) DeepCopyInto(out *KafkaClusterUserParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]UserPermissionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaClusterUserParameters.
func (in *KafkaClusterUserParameters) DeepCopy() *KafkaClusterUserParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaClusterUserParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaConfigObservation) DeepCopyInto(out *KafkaConfigObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaConfigObservation.
func (in *KafkaConfigObservation) DeepCopy() *KafkaConfigObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaConfigParameters) DeepCopyInto(out *KafkaConfigParameters) {
	*out = *in
	if in.AutoCreateTopicsEnable != nil {
		in, out := &in.AutoCreateTopicsEnable, &out.AutoCreateTopicsEnable
		*out = new(bool)
		**out = **in
	}
	if in.CompressionType != nil {
		in, out := &in.CompressionType, &out.CompressionType
		*out = new(string)
		**out = **in
	}
	if in.DefaultReplicationFactor != nil {
		in, out := &in.DefaultReplicationFactor, &out.DefaultReplicationFactor
		*out = new(string)
		**out = **in
	}
	if in.LogFlushIntervalMessages != nil {
		in, out := &in.LogFlushIntervalMessages, &out.LogFlushIntervalMessages
		*out = new(string)
		**out = **in
	}
	if in.LogFlushIntervalMs != nil {
		in, out := &in.LogFlushIntervalMs, &out.LogFlushIntervalMs
		*out = new(string)
		**out = **in
	}
	if in.LogFlushSchedulerIntervalMs != nil {
		in, out := &in.LogFlushSchedulerIntervalMs, &out.LogFlushSchedulerIntervalMs
		*out = new(string)
		**out = **in
	}
	if in.LogPreallocate != nil {
		in, out := &in.LogPreallocate, &out.LogPreallocate
		*out = new(bool)
		**out = **in
	}
	if in.LogRetentionBytes != nil {
		in, out := &in.LogRetentionBytes, &out.LogRetentionBytes
		*out = new(string)
		**out = **in
	}
	if in.LogRetentionHours != nil {
		in, out := &in.LogRetentionHours, &out.LogRetentionHours
		*out = new(string)
		**out = **in
	}
	if in.LogRetentionMinutes != nil {
		in, out := &in.LogRetentionMinutes, &out.LogRetentionMinutes
		*out = new(string)
		**out = **in
	}
	if in.LogRetentionMs != nil {
		in, out := &in.LogRetentionMs, &out.LogRetentionMs
		*out = new(string)
		**out = **in
	}
	if in.LogSegmentBytes != nil {
		in, out := &in.LogSegmentBytes, &out.LogSegmentBytes
		*out = new(string)
		**out = **in
	}
	if in.NumPartitions != nil {
		in, out := &in.NumPartitions, &out.NumPartitions
		*out = new(string)
		**out = **in
	}
	if in.SocketReceiveBufferBytes != nil {
		in, out := &in.SocketReceiveBufferBytes, &out.SocketReceiveBufferBytes
		*out = new(string)
		**out = **in
	}
	if in.SocketSendBufferBytes != nil {
		in, out := &in.SocketSendBufferBytes, &out.SocketSendBufferBytes
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaConfigParameters.
func (in *KafkaConfigParameters) DeepCopy() *KafkaConfigParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaObservation) DeepCopyInto(out *KafkaObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaObservation.
func (in *KafkaObservation) DeepCopy() *KafkaObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaParameters) DeepCopyInto(out *KafkaParameters) {
	*out = *in
	if in.SaslMechanism != nil {
		in, out := &in.SaslMechanism, &out.SaslMechanism
		*out = new(string)
		**out = **in
	}
	if in.SaslPasswordSecretRef != nil {
		in, out := &in.SaslPasswordSecretRef, &out.SaslPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.SaslUsername != nil {
		in, out := &in.SaslUsername, &out.SaslUsername
		*out = new(string)
		**out = **in
	}
	if in.SecurityProtocol != nil {
		in, out := &in.SecurityProtocol, &out.SecurityProtocol
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaParameters.
func (in *KafkaParameters) DeepCopy() *KafkaParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaResourcesObservation) DeepCopyInto(out *KafkaResourcesObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaResourcesObservation.
func (in *KafkaResourcesObservation) DeepCopy() *KafkaResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaResourcesParameters) DeepCopyInto(out *KafkaResourcesParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaResourcesParameters.
func (in *KafkaResourcesParameters) DeepCopy() *KafkaResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaResourcesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopic) DeepCopyInto(out *KafkaTopic) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopic.
func (in *KafkaTopic) DeepCopy() *KafkaTopic {
	if in == nil {
		return nil
	}
	out := new(KafkaTopic)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KafkaTopic) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopicList) DeepCopyInto(out *KafkaTopicList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]KafkaTopic, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopicList.
func (in *KafkaTopicList) DeepCopy() *KafkaTopicList {
	if in == nil {
		return nil
	}
	out := new(KafkaTopicList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *KafkaTopicList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopicObservation) DeepCopyInto(out *KafkaTopicObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopicObservation.
func (in *KafkaTopicObservation) DeepCopy() *KafkaTopicObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaTopicObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopicObservation_2) DeepCopyInto(out *KafkaTopicObservation_2) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopicObservation_2.
func (in *KafkaTopicObservation_2) DeepCopy() *KafkaTopicObservation_2 {
	if in == nil {
		return nil
	}
	out := new(KafkaTopicObservation_2)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopicParameters) DeepCopyInto(out *KafkaTopicParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make([]SettingsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopicParameters.
func (in *KafkaTopicParameters) DeepCopy() *KafkaTopicParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaTopicParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopicParameters_2) DeepCopyInto(out *KafkaTopicParameters_2) {
	*out = *in
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Partitions != nil {
		in, out := &in.Partitions, &out.Partitions
		*out = new(int64)
		**out = **in
	}
	if in.ReplicationFactor != nil {
		in, out := &in.ReplicationFactor, &out.ReplicationFactor
		*out = new(int64)
		**out = **in
	}
	if in.TopicConfig != nil {
		in, out := &in.TopicConfig, &out.TopicConfig
		*out = make([]KafkaTopicTopicConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopicParameters_2.
func (in *KafkaTopicParameters_2) DeepCopy() *KafkaTopicParameters_2 {
	if in == nil {
		return nil
	}
	out := new(KafkaTopicParameters_2)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopicSpec) DeepCopyInto(out *KafkaTopicSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopicSpec.
func (in *KafkaTopicSpec) DeepCopy() *KafkaTopicSpec {
	if in == nil {
		return nil
	}
	out := new(KafkaTopicSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopicStatus) DeepCopyInto(out *KafkaTopicStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	out.AtProvider = in.AtProvider
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopicStatus.
func (in *KafkaTopicStatus) DeepCopy() *KafkaTopicStatus {
	if in == nil {
		return nil
	}
	out := new(KafkaTopicStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopicTopicConfigObservation) DeepCopyInto(out *KafkaTopicTopicConfigObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopicTopicConfigObservation.
func (in *KafkaTopicTopicConfigObservation) DeepCopy() *KafkaTopicTopicConfigObservation {
	if in == nil {
		return nil
	}
	out := new(KafkaTopicTopicConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *KafkaTopicTopicConfigParameters) DeepCopyInto(out *KafkaTopicTopicConfigParameters) {
	*out = *in
	if in.CleanupPolicy != nil {
		in, out := &in.CleanupPolicy, &out.CleanupPolicy
		*out = new(string)
		**out = **in
	}
	if in.CompressionType != nil {
		in, out := &in.CompressionType, &out.CompressionType
		*out = new(string)
		**out = **in
	}
	if in.DeleteRetentionMs != nil {
		in, out := &in.DeleteRetentionMs, &out.DeleteRetentionMs
		*out = new(string)
		**out = **in
	}
	if in.FileDeleteDelayMs != nil {
		in, out := &in.FileDeleteDelayMs, &out.FileDeleteDelayMs
		*out = new(string)
		**out = **in
	}
	if in.FlushMessages != nil {
		in, out := &in.FlushMessages, &out.FlushMessages
		*out = new(string)
		**out = **in
	}
	if in.FlushMs != nil {
		in, out := &in.FlushMs, &out.FlushMs
		*out = new(string)
		**out = **in
	}
	if in.MaxMessageBytes != nil {
		in, out := &in.MaxMessageBytes, &out.MaxMessageBytes
		*out = new(string)
		**out = **in
	}
	if in.MinCompactionLagMs != nil {
		in, out := &in.MinCompactionLagMs, &out.MinCompactionLagMs
		*out = new(string)
		**out = **in
	}
	if in.MinInsyncReplicas != nil {
		in, out := &in.MinInsyncReplicas, &out.MinInsyncReplicas
		*out = new(string)
		**out = **in
	}
	if in.Preallocate != nil {
		in, out := &in.Preallocate, &out.Preallocate
		*out = new(bool)
		**out = **in
	}
	if in.RetentionBytes != nil {
		in, out := &in.RetentionBytes, &out.RetentionBytes
		*out = new(string)
		**out = **in
	}
	if in.RetentionMs != nil {
		in, out := &in.RetentionMs, &out.RetentionMs
		*out = new(string)
		**out = **in
	}
	if in.SegmentBytes != nil {
		in, out := &in.SegmentBytes, &out.SegmentBytes
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new KafkaTopicTopicConfigParameters.
func (in *KafkaTopicTopicConfigParameters) DeepCopy() *KafkaTopicTopicConfigParameters {
	if in == nil {
		return nil
	}
	out := new(KafkaTopicTopicConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MaintenanceWindowObservation) DeepCopyInto(out *MaintenanceWindowObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MaintenanceWindowObservation.
func (in *MaintenanceWindowObservation) DeepCopy() *MaintenanceWindowObservation {
	if in == nil {
		return nil
	}
	out := new(MaintenanceWindowObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MaintenanceWindowParameters) DeepCopyInto(out *MaintenanceWindowParameters) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(int64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MaintenanceWindowParameters.
func (in *MaintenanceWindowParameters) DeepCopy() *MaintenanceWindowParameters {
	if in == nil {
		return nil
	}
	out := new(MaintenanceWindowParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterHostsObservation) DeepCopyInto(out *MasterHostsObservation) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterHostsObservation.
func (in *MasterHostsObservation) DeepCopy() *MasterHostsObservation {
	if in == nil {
		return nil
	}
	out := new(MasterHostsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterHostsParameters) DeepCopyInto(out *MasterHostsParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterHostsParameters.
func (in *MasterHostsParameters) DeepCopy() *MasterHostsParameters {
	if in == nil {
		return nil
	}
	out := new(MasterHostsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterNodeObservation) DeepCopyInto(out *MasterNodeObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterNodeObservation.
func (in *MasterNodeObservation) DeepCopy() *MasterNodeObservation {
	if in == nil {
		return nil
	}
	out := new(MasterNodeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterNodeParameters) DeepCopyInto(out *MasterNodeParameters) {
	*out = *in
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]MasterNodeResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterNodeParameters.
func (in *MasterNodeParameters) DeepCopy() *MasterNodeParameters {
	if in == nil {
		return nil
	}
	out := new(MasterNodeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterNodeResourcesObservation) DeepCopyInto(out *MasterNodeResourcesObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterNodeResourcesObservation.
func (in *MasterNodeResourcesObservation) DeepCopy() *MasterNodeResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(MasterNodeResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterNodeResourcesParameters) DeepCopyInto(out *MasterNodeResourcesParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterNodeResourcesParameters.
func (in *MasterNodeResourcesParameters) DeepCopy() *MasterNodeResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(MasterNodeResourcesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterSubclusterObservation) DeepCopyInto(out *MasterSubclusterObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterSubclusterObservation.
func (in *MasterSubclusterObservation) DeepCopy() *MasterSubclusterObservation {
	if in == nil {
		return nil
	}
	out := new(MasterSubclusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterSubclusterParameters) DeepCopyInto(out *MasterSubclusterParameters) {
	*out = *in
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]MasterSubclusterResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterSubclusterParameters.
func (in *MasterSubclusterParameters) DeepCopy() *MasterSubclusterParameters {
	if in == nil {
		return nil
	}
	out := new(MasterSubclusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterSubclusterResourcesObservation) DeepCopyInto(out *MasterSubclusterResourcesObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterSubclusterResourcesObservation.
func (in *MasterSubclusterResourcesObservation) DeepCopy() *MasterSubclusterResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(MasterSubclusterResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MasterSubclusterResourcesParameters) DeepCopyInto(out *MasterSubclusterResourcesParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MasterSubclusterResourcesParameters.
func (in *MasterSubclusterResourcesParameters) DeepCopy() *MasterSubclusterResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(MasterSubclusterResourcesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MergeTreeObservation) DeepCopyInto(out *MergeTreeObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MergeTreeObservation.
func (in *MergeTreeObservation) DeepCopy() *MergeTreeObservation {
	if in == nil {
		return nil
	}
	out := new(MergeTreeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MergeTreeParameters) DeepCopyInto(out *MergeTreeParameters) {
	*out = *in
	if in.MaxBytesToMergeAtMinSpaceInPool != nil {
		in, out := &in.MaxBytesToMergeAtMinSpaceInPool, &out.MaxBytesToMergeAtMinSpaceInPool
		*out = new(int64)
		**out = **in
	}
	if in.MaxReplicatedMergesInQueue != nil {
		in, out := &in.MaxReplicatedMergesInQueue, &out.MaxReplicatedMergesInQueue
		*out = new(int64)
		**out = **in
	}
	if in.NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge != nil {
		in, out := &in.NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge, &out.NumberOfFreeEntriesInPoolToLowerMaxSizeOfMerge
		*out = new(int64)
		**out = **in
	}
	if in.PartsToDelayInsert != nil {
		in, out := &in.PartsToDelayInsert, &out.PartsToDelayInsert
		*out = new(int64)
		**out = **in
	}
	if in.PartsToThrowInsert != nil {
		in, out := &in.PartsToThrowInsert, &out.PartsToThrowInsert
		*out = new(int64)
		**out = **in
	}
	if in.ReplicatedDeduplicationWindow != nil {
		in, out := &in.ReplicatedDeduplicationWindow, &out.ReplicatedDeduplicationWindow
		*out = new(int64)
		**out = **in
	}
	if in.ReplicatedDeduplicationWindowSeconds != nil {
		in, out := &in.ReplicatedDeduplicationWindowSeconds, &out.ReplicatedDeduplicationWindowSeconds
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MergeTreeParameters.
func (in *MergeTreeParameters) DeepCopy() *MergeTreeParameters {
	if in == nil {
		return nil
	}
	out := new(MergeTreeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MlModelObservation) DeepCopyInto(out *MlModelObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MlModelObservation.
func (in *MlModelObservation) DeepCopy() *MlModelObservation {
	if in == nil {
		return nil
	}
	out := new(MlModelObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MlModelParameters) DeepCopyInto(out *MlModelParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.URI != nil {
		in, out := &in.URI, &out.URI
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MlModelParameters.
func (in *MlModelParameters) DeepCopy() *MlModelParameters {
	if in == nil {
		return nil
	}
	out := new(MlModelParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbCluster) DeepCopyInto(out *MongodbCluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbCluster.
func (in *MongodbCluster) DeepCopy() *MongodbCluster {
	if in == nil {
		return nil
	}
	out := new(MongodbCluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MongodbCluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterDatabaseObservation) DeepCopyInto(out *MongodbClusterDatabaseObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterDatabaseObservation.
func (in *MongodbClusterDatabaseObservation) DeepCopy() *MongodbClusterDatabaseObservation {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterDatabaseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterDatabaseParameters) DeepCopyInto(out *MongodbClusterDatabaseParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterDatabaseParameters.
func (in *MongodbClusterDatabaseParameters) DeepCopy() *MongodbClusterDatabaseParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterDatabaseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterHostObservation) DeepCopyInto(out *MongodbClusterHostObservation) {
	*out = *in
	if in.Health != nil {
		in, out := &in.Health, &out.Health
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterHostObservation.
func (in *MongodbClusterHostObservation) DeepCopy() *MongodbClusterHostObservation {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterHostObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterHostParameters) DeepCopyInto(out *MongodbClusterHostParameters) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.ShardName != nil {
		in, out := &in.ShardName, &out.ShardName
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
	if in.ZoneID != nil {
		in, out := &in.ZoneID, &out.ZoneID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterHostParameters.
func (in *MongodbClusterHostParameters) DeepCopy() *MongodbClusterHostParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterHostParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterList) DeepCopyInto(out *MongodbClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MongodbCluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterList.
func (in *MongodbClusterList) DeepCopy() *MongodbClusterList {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MongodbClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterMaintenanceWindowObservation) DeepCopyInto(out *MongodbClusterMaintenanceWindowObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterMaintenanceWindowObservation.
func (in *MongodbClusterMaintenanceWindowObservation) DeepCopy() *MongodbClusterMaintenanceWindowObservation {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterMaintenanceWindowObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterMaintenanceWindowParameters) DeepCopyInto(out *MongodbClusterMaintenanceWindowParameters) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(int64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterMaintenanceWindowParameters.
func (in *MongodbClusterMaintenanceWindowParameters) DeepCopy() *MongodbClusterMaintenanceWindowParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterMaintenanceWindowParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterObservation) DeepCopyInto(out *MongodbClusterObservation) {
	*out = *in
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.Health != nil {
		in, out := &in.Health, &out.Health
		*out = new(string)
		**out = **in
	}
	if in.Sharded != nil {
		in, out := &in.Sharded, &out.Sharded
		*out = new(bool)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterObservation.
func (in *MongodbClusterObservation) DeepCopy() *MongodbClusterObservation {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterParameters) DeepCopyInto(out *MongodbClusterParameters) {
	*out = *in
	if in.ClusterConfig != nil {
		in, out := &in.ClusterConfig, &out.ClusterConfig
		*out = make([]ClusterConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.ClusterID != nil {
		in, out := &in.ClusterID, &out.ClusterID
		*out = new(string)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = make([]MongodbClusterDatabaseParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]MongodbClusterHostParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]MongodbClusterMaintenanceWindowParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]MongodbClusterResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = make([]MongodbClusterUserParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterParameters.
func (in *MongodbClusterParameters) DeepCopy() *MongodbClusterParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterResourcesObservation) DeepCopyInto(out *MongodbClusterResourcesObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterResourcesObservation.
func (in *MongodbClusterResourcesObservation) DeepCopy() *MongodbClusterResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterResourcesParameters) DeepCopyInto(out *MongodbClusterResourcesParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterResourcesParameters.
func (in *MongodbClusterResourcesParameters) DeepCopy() *MongodbClusterResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterResourcesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterSpec) DeepCopyInto(out *MongodbClusterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterSpec.
func (in *MongodbClusterSpec) DeepCopy() *MongodbClusterSpec {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterStatus) DeepCopyInto(out *MongodbClusterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterStatus.
func (in *MongodbClusterStatus) DeepCopy() *MongodbClusterStatus {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterUserObservation) DeepCopyInto(out *MongodbClusterUserObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterUserObservation.
func (in *MongodbClusterUserObservation) DeepCopy() *MongodbClusterUserObservation {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterUserObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterUserParameters) DeepCopyInto(out *MongodbClusterUserParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]MongodbClusterUserPermissionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterUserParameters.
func (in *MongodbClusterUserParameters) DeepCopy() *MongodbClusterUserParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterUserParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterUserPermissionObservation) DeepCopyInto(out *MongodbClusterUserPermissionObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterUserPermissionObservation.
func (in *MongodbClusterUserPermissionObservation) DeepCopy() *MongodbClusterUserPermissionObservation {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterUserPermissionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MongodbClusterUserPermissionParameters) DeepCopyInto(out *MongodbClusterUserPermissionParameters) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.Roles != nil {
		in, out := &in.Roles, &out.Roles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MongodbClusterUserPermissionParameters.
func (in *MongodbClusterUserPermissionParameters) DeepCopy() *MongodbClusterUserPermissionParameters {
	if in == nil {
		return nil
	}
	out := new(MongodbClusterUserPermissionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlCluster) DeepCopyInto(out *MysqlCluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlCluster.
func (in *MysqlCluster) DeepCopy() *MysqlCluster {
	if in == nil {
		return nil
	}
	out := new(MysqlCluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MysqlCluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlClusterAccessObservation) DeepCopyInto(out *MysqlClusterAccessObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlClusterAccessObservation.
func (in *MysqlClusterAccessObservation) DeepCopy() *MysqlClusterAccessObservation {
	if in == nil {
		return nil
	}
	out := new(MysqlClusterAccessObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlClusterAccessParameters) DeepCopyInto(out *MysqlClusterAccessParameters) {
	*out = *in
	if in.DataLens != nil {
		in, out := &in.DataLens, &out.DataLens
		*out = new(bool)
		**out = **in
	}
	if in.WebSQL != nil {
		in, out := &in.WebSQL, &out.WebSQL
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlClusterAccessParameters.
func (in *MysqlClusterAccessParameters) DeepCopy() *MysqlClusterAccessParameters {
	if in == nil {
		return nil
	}
	out := new(MysqlClusterAccessParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlClusterBackupWindowStartObservation) DeepCopyInto(out *MysqlClusterBackupWindowStartObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlClusterBackupWindowStartObservation.
func (in *MysqlClusterBackupWindowStartObservation) DeepCopy() *MysqlClusterBackupWindowStartObservation {
	if in == nil {
		return nil
	}
	out := new(MysqlClusterBackupWindowStartObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlClusterBackupWindowStartParameters) DeepCopyInto(out *MysqlClusterBackupWindowStartParameters) {
	*out = *in
	if in.Hours != nil {
		in, out := &in.Hours, &out.Hours
		*out = new(int64)
		**out = **in
	}
	if in.Minutes != nil {
		in, out := &in.Minutes, &out.Minutes
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlClusterBackupWindowStartParameters.
func (in *MysqlClusterBackupWindowStartParameters) DeepCopy() *MysqlClusterBackupWindowStartParameters {
	if in == nil {
		return nil
	}
	out := new(MysqlClusterBackupWindowStartParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlClusterDatabaseObservation) DeepCopyInto(out *MysqlClusterDatabaseObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlClusterDatabaseObservation.
func (in *MysqlClusterDatabaseObservation) DeepCopy() *MysqlClusterDatabaseObservation {
	if in == nil {
		return nil
	}
	out := new(MysqlClusterDatabaseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlClusterDatabaseParameters) DeepCopyInto(out *MysqlClusterDatabaseParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlClusterDatabaseParameters.
func (in *MysqlClusterDatabaseParameters) DeepCopy() *MysqlClusterDatabaseParameters {
	if in == nil {
		return nil
	}
	out := new(MysqlClusterDatabaseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlClusterHostObservation) DeepCopyInto(out *MysqlClusterHostObservation) {
	*out = *in
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
	if in.ReplicationSource != nil {
		in, out := &in.ReplicationSource, &out.ReplicationSource
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlClusterHostObservation.
func (in *MysqlClusterHostObservation) DeepCopy() *MysqlClusterHostObservation {
	if in == nil {
		return nil
	}
	out := new(MysqlClusterHostObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlClusterHostParameters) DeepCopyInto(out *MysqlClusterHostParameters) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ReplicationSourceName != nil {
		in, out := &in.ReplicationSourceName, &out.ReplicationSourceName
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlClusterHostParameters.
func (in *MysqlClusterHostParameters) DeepCopy() *MysqlClusterHostParameters {
	if in == nil {
		return nil
	}
	out := new(MysqlClusterHostParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlClusterList) DeepCopyInto(out *MysqlClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]MysqlCluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlClusterList.
func (in *MysqlClusterList) DeepCopy() *MysqlClusterList {
	if in == nil {
		return nil
	}
	out := new(MysqlClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *MysqlClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlClusterMaintenanceWindowObservation) DeepCopyInto(out *MysqlClusterMaintenanceWindowObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlClusterMaintenanceWindowObservation.
func (in *MysqlClusterMaintenanceWindowObservation) DeepCopy() *MysqlClusterMaintenanceWindowObservation {
	if in == nil {
		return nil
	}
	out := new(MysqlClusterMaintenanceWindowObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlClusterMaintenanceWindowParameters) DeepCopyInto(out *MysqlClusterMaintenanceWindowParameters) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(int64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlClusterMaintenanceWindowParameters.
func (in *MysqlClusterMaintenanceWindowParameters) DeepCopy() *MysqlClusterMaintenanceWindowParameters {
	if in == nil {
		return nil
	}
	out := new(MysqlClusterMaintenanceWindowParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlClusterObservation) DeepCopyInto(out *MysqlClusterObservation) {
	*out = *in
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.Health != nil {
		in, out := &in.Health, &out.Health
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlClusterObservation.
func (in *MysqlClusterObservation) DeepCopy() *MysqlClusterObservation {
	if in == nil {
		return nil
	}
	out := new(MysqlClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlClusterParameters) DeepCopyInto(out *MysqlClusterParameters) {
	*out = *in
	if in.Access != nil {
		in, out := &in.Access, &out.Access
		*out = make([]MysqlClusterAccessParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.AllowRegenerationHost != nil {
		in, out := &in.AllowRegenerationHost, &out.AllowRegenerationHost
		*out = new(bool)
		**out = **in
	}
	if in.BackupWindowStart != nil {
		in, out := &in.BackupWindowStart, &out.BackupWindowStart
		*out = make([]MysqlClusterBackupWindowStartParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = make([]MysqlClusterDatabaseParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]MysqlClusterHostParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]MysqlClusterMaintenanceWindowParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.MysqlConfig != nil {
		in, out := &in.MysqlConfig, &out.MysqlConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]MysqlClusterResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Restore != nil {
		in, out := &in.Restore, &out.Restore
		*out = make([]RestoreParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = make([]MysqlClusterUserParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlClusterParameters.
func (in *MysqlClusterParameters) DeepCopy() *MysqlClusterParameters {
	if in == nil {
		return nil
	}
	out := new(MysqlClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlClusterResourcesObservation) DeepCopyInto(out *MysqlClusterResourcesObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlClusterResourcesObservation.
func (in *MysqlClusterResourcesObservation) DeepCopy() *MysqlClusterResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(MysqlClusterResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlClusterResourcesParameters) DeepCopyInto(out *MysqlClusterResourcesParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlClusterResourcesParameters.
func (in *MysqlClusterResourcesParameters) DeepCopy() *MysqlClusterResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(MysqlClusterResourcesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlClusterSpec) DeepCopyInto(out *MysqlClusterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlClusterSpec.
func (in *MysqlClusterSpec) DeepCopy() *MysqlClusterSpec {
	if in == nil {
		return nil
	}
	out := new(MysqlClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlClusterStatus) DeepCopyInto(out *MysqlClusterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlClusterStatus.
func (in *MysqlClusterStatus) DeepCopy() *MysqlClusterStatus {
	if in == nil {
		return nil
	}
	out := new(MysqlClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlClusterUserObservation) DeepCopyInto(out *MysqlClusterUserObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlClusterUserObservation.
func (in *MysqlClusterUserObservation) DeepCopy() *MysqlClusterUserObservation {
	if in == nil {
		return nil
	}
	out := new(MysqlClusterUserObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlClusterUserParameters) DeepCopyInto(out *MysqlClusterUserParameters) {
	*out = *in
	if in.AuthenticationPlugin != nil {
		in, out := &in.AuthenticationPlugin, &out.AuthenticationPlugin
		*out = new(string)
		**out = **in
	}
	if in.ConnectionLimits != nil {
		in, out := &in.ConnectionLimits, &out.ConnectionLimits
		*out = make([]ConnectionLimitsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.GlobalPermissions != nil {
		in, out := &in.GlobalPermissions, &out.GlobalPermissions
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]MysqlClusterUserPermissionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlClusterUserParameters.
func (in *MysqlClusterUserParameters) DeepCopy() *MysqlClusterUserParameters {
	if in == nil {
		return nil
	}
	out := new(MysqlClusterUserParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlClusterUserPermissionObservation) DeepCopyInto(out *MysqlClusterUserPermissionObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlClusterUserPermissionObservation.
func (in *MysqlClusterUserPermissionObservation) DeepCopy() *MysqlClusterUserPermissionObservation {
	if in == nil {
		return nil
	}
	out := new(MysqlClusterUserPermissionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *MysqlClusterUserPermissionParameters) DeepCopyInto(out *MysqlClusterUserPermissionParameters) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.Roles != nil {
		in, out := &in.Roles, &out.Roles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new MysqlClusterUserPermissionParameters.
func (in *MysqlClusterUserPermissionParameters) DeepCopy() *MysqlClusterUserPermissionParameters {
	if in == nil {
		return nil
	}
	out := new(MysqlClusterUserPermissionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PatternObservation) DeepCopyInto(out *PatternObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PatternObservation.
func (in *PatternObservation) DeepCopy() *PatternObservation {
	if in == nil {
		return nil
	}
	out := new(PatternObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PatternParameters) DeepCopyInto(out *PatternParameters) {
	*out = *in
	if in.Function != nil {
		in, out := &in.Function, &out.Function
		*out = new(string)
		**out = **in
	}
	if in.Regexp != nil {
		in, out := &in.Regexp, &out.Regexp
		*out = new(string)
		**out = **in
	}
	if in.Retention != nil {
		in, out := &in.Retention, &out.Retention
		*out = make([]RetentionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PatternParameters.
func (in *PatternParameters) DeepCopy() *PatternParameters {
	if in == nil {
		return nil
	}
	out := new(PatternParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PerformanceDiagnosticsObservation) DeepCopyInto(out *PerformanceDiagnosticsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PerformanceDiagnosticsObservation.
func (in *PerformanceDiagnosticsObservation) DeepCopy() *PerformanceDiagnosticsObservation {
	if in == nil {
		return nil
	}
	out := new(PerformanceDiagnosticsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PerformanceDiagnosticsParameters) DeepCopyInto(out *PerformanceDiagnosticsParameters) {
	*out = *in
	if in.Enabled != nil {
		in, out := &in.Enabled, &out.Enabled
		*out = new(bool)
		**out = **in
	}
	if in.SessionsSamplingInterval != nil {
		in, out := &in.SessionsSamplingInterval, &out.SessionsSamplingInterval
		*out = new(int64)
		**out = **in
	}
	if in.StatementsSamplingInterval != nil {
		in, out := &in.StatementsSamplingInterval, &out.StatementsSamplingInterval
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PerformanceDiagnosticsParameters.
func (in *PerformanceDiagnosticsParameters) DeepCopy() *PerformanceDiagnosticsParameters {
	if in == nil {
		return nil
	}
	out := new(PerformanceDiagnosticsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PermissionObservation) DeepCopyInto(out *PermissionObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PermissionObservation.
func (in *PermissionObservation) DeepCopy() *PermissionObservation {
	if in == nil {
		return nil
	}
	out := new(PermissionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PermissionParameters) DeepCopyInto(out *PermissionParameters) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PermissionParameters.
func (in *PermissionParameters) DeepCopy() *PermissionParameters {
	if in == nil {
		return nil
	}
	out := new(PermissionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PoolerConfigObservation) DeepCopyInto(out *PoolerConfigObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PoolerConfigObservation.
func (in *PoolerConfigObservation) DeepCopy() *PoolerConfigObservation {
	if in == nil {
		return nil
	}
	out := new(PoolerConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PoolerConfigParameters) DeepCopyInto(out *PoolerConfigParameters) {
	*out = *in
	if in.PoolDiscard != nil {
		in, out := &in.PoolDiscard, &out.PoolDiscard
		*out = new(bool)
		**out = **in
	}
	if in.PoolingMode != nil {
		in, out := &in.PoolingMode, &out.PoolingMode
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PoolerConfigParameters.
func (in *PoolerConfigParameters) DeepCopy() *PoolerConfigParameters {
	if in == nil {
		return nil
	}
	out := new(PoolerConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlCluster) DeepCopyInto(out *PostgresqlCluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlCluster.
func (in *PostgresqlCluster) DeepCopy() *PostgresqlCluster {
	if in == nil {
		return nil
	}
	out := new(PostgresqlCluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PostgresqlCluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterConfigObservation) DeepCopyInto(out *PostgresqlClusterConfigObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterConfigObservation.
func (in *PostgresqlClusterConfigObservation) DeepCopy() *PostgresqlClusterConfigObservation {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterConfigParameters) DeepCopyInto(out *PostgresqlClusterConfigParameters) {
	*out = *in
	if in.Access != nil {
		in, out := &in.Access, &out.Access
		*out = make([]ConfigAccessParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Autofailover != nil {
		in, out := &in.Autofailover, &out.Autofailover
		*out = new(bool)
		**out = **in
	}
	if in.BackupRetainPeriodDays != nil {
		in, out := &in.BackupRetainPeriodDays, &out.BackupRetainPeriodDays
		*out = new(int64)
		**out = **in
	}
	if in.BackupWindowStart != nil {
		in, out := &in.BackupWindowStart, &out.BackupWindowStart
		*out = make([]ConfigBackupWindowStartParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PerformanceDiagnostics != nil {
		in, out := &in.PerformanceDiagnostics, &out.PerformanceDiagnostics
		*out = make([]PerformanceDiagnosticsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PoolerConfig != nil {
		in, out := &in.PoolerConfig, &out.PoolerConfig
		*out = make([]PoolerConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.PostgresqlConfig != nil {
		in, out := &in.PostgresqlConfig, &out.PostgresqlConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]ConfigResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterConfigParameters.
func (in *PostgresqlClusterConfigParameters) DeepCopy() *PostgresqlClusterConfigParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterDatabaseObservation) DeepCopyInto(out *PostgresqlClusterDatabaseObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterDatabaseObservation.
func (in *PostgresqlClusterDatabaseObservation) DeepCopy() *PostgresqlClusterDatabaseObservation {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterDatabaseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterDatabaseParameters) DeepCopyInto(out *PostgresqlClusterDatabaseParameters) {
	*out = *in
	if in.Extension != nil {
		in, out := &in.Extension, &out.Extension
		*out = make([]ExtensionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.LcCollate != nil {
		in, out := &in.LcCollate, &out.LcCollate
		*out = new(string)
		**out = **in
	}
	if in.LcType != nil {
		in, out := &in.LcType, &out.LcType
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterDatabaseParameters.
func (in *PostgresqlClusterDatabaseParameters) DeepCopy() *PostgresqlClusterDatabaseParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterDatabaseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterHostObservation) DeepCopyInto(out *PostgresqlClusterHostObservation) {
	*out = *in
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
	if in.ReplicationSource != nil {
		in, out := &in.ReplicationSource, &out.ReplicationSource
		*out = new(string)
		**out = **in
	}
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterHostObservation.
func (in *PostgresqlClusterHostObservation) DeepCopy() *PostgresqlClusterHostObservation {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterHostObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterHostParameters) DeepCopyInto(out *PostgresqlClusterHostParameters) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(int64)
		**out = **in
	}
	if in.ReplicationSourceName != nil {
		in, out := &in.ReplicationSourceName, &out.ReplicationSourceName
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterHostParameters.
func (in *PostgresqlClusterHostParameters) DeepCopy() *PostgresqlClusterHostParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterHostParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterList) DeepCopyInto(out *PostgresqlClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]PostgresqlCluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterList.
func (in *PostgresqlClusterList) DeepCopy() *PostgresqlClusterList {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PostgresqlClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterMaintenanceWindowObservation) DeepCopyInto(out *PostgresqlClusterMaintenanceWindowObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterMaintenanceWindowObservation.
func (in *PostgresqlClusterMaintenanceWindowObservation) DeepCopy() *PostgresqlClusterMaintenanceWindowObservation {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterMaintenanceWindowObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterMaintenanceWindowParameters) DeepCopyInto(out *PostgresqlClusterMaintenanceWindowParameters) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(int64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterMaintenanceWindowParameters.
func (in *PostgresqlClusterMaintenanceWindowParameters) DeepCopy() *PostgresqlClusterMaintenanceWindowParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterMaintenanceWindowParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterObservation) DeepCopyInto(out *PostgresqlClusterObservation) {
	*out = *in
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.Health != nil {
		in, out := &in.Health, &out.Health
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterObservation.
func (in *PostgresqlClusterObservation) DeepCopy() *PostgresqlClusterObservation {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterParameters) DeepCopyInto(out *PostgresqlClusterParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make([]PostgresqlClusterConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = make([]PostgresqlClusterDatabaseParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.FolderIDRef != nil {
		in, out := &in.FolderIDRef, &out.FolderIDRef
		*out = new(v1.Reference)
		**out = **in
	}
	if in.FolderIDSelector != nil {
		in, out := &in.FolderIDSelector, &out.FolderIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]PostgresqlClusterHostParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.HostMasterName != nil {
		in, out := &in.HostMasterName, &out.HostMasterName
		*out = new(string)
		**out = **in
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]PostgresqlClusterMaintenanceWindowParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.NetworkIDRef != nil {
		in, out := &in.NetworkIDRef, &out.NetworkIDRef
		*out = new(v1.Reference)
		**out = **in
	}
	if in.NetworkIDSelector != nil {
		in, out := &in.NetworkIDSelector, &out.NetworkIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Restore != nil {
		in, out := &in.Restore, &out.Restore
		*out = make([]PostgresqlClusterRestoreParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = make([]PostgresqlClusterUserParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterParameters.
func (in *PostgresqlClusterParameters) DeepCopy() *PostgresqlClusterParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterRestoreObservation) DeepCopyInto(out *PostgresqlClusterRestoreObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterRestoreObservation.
func (in *PostgresqlClusterRestoreObservation) DeepCopy() *PostgresqlClusterRestoreObservation {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterRestoreObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterRestoreParameters) DeepCopyInto(out *PostgresqlClusterRestoreParameters) {
	*out = *in
	if in.BackupID != nil {
		in, out := &in.BackupID, &out.BackupID
		*out = new(string)
		**out = **in
	}
	if in.Time != nil {
		in, out := &in.Time, &out.Time
		*out = new(string)
		**out = **in
	}
	if in.TimeInclusive != nil {
		in, out := &in.TimeInclusive, &out.TimeInclusive
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterRestoreParameters.
func (in *PostgresqlClusterRestoreParameters) DeepCopy() *PostgresqlClusterRestoreParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterRestoreParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterSpec) DeepCopyInto(out *PostgresqlClusterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterSpec.
func (in *PostgresqlClusterSpec) DeepCopy() *PostgresqlClusterSpec {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterStatus) DeepCopyInto(out *PostgresqlClusterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterStatus.
func (in *PostgresqlClusterStatus) DeepCopy() *PostgresqlClusterStatus {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterUserObservation) DeepCopyInto(out *PostgresqlClusterUserObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterUserObservation.
func (in *PostgresqlClusterUserObservation) DeepCopy() *PostgresqlClusterUserObservation {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterUserObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterUserParameters) DeepCopyInto(out *PostgresqlClusterUserParameters) {
	*out = *in
	if in.ConnLimit != nil {
		in, out := &in.ConnLimit, &out.ConnLimit
		*out = new(int64)
		**out = **in
	}
	if in.Grants != nil {
		in, out := &in.Grants, &out.Grants
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Login != nil {
		in, out := &in.Login, &out.Login
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]PostgresqlClusterUserPermissionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterUserParameters.
func (in *PostgresqlClusterUserParameters) DeepCopy() *PostgresqlClusterUserParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterUserParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterUserPermissionObservation) DeepCopyInto(out *PostgresqlClusterUserPermissionObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterUserPermissionObservation.
func (in *PostgresqlClusterUserPermissionObservation) DeepCopy() *PostgresqlClusterUserPermissionObservation {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterUserPermissionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PostgresqlClusterUserPermissionParameters) DeepCopyInto(out *PostgresqlClusterUserPermissionParameters) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PostgresqlClusterUserPermissionParameters.
func (in *PostgresqlClusterUserPermissionParameters) DeepCopy() *PostgresqlClusterUserPermissionParameters {
	if in == nil {
		return nil
	}
	out := new(PostgresqlClusterUserPermissionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QuotaObservation) DeepCopyInto(out *QuotaObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QuotaObservation.
func (in *QuotaObservation) DeepCopy() *QuotaObservation {
	if in == nil {
		return nil
	}
	out := new(QuotaObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *QuotaParameters) DeepCopyInto(out *QuotaParameters) {
	*out = *in
	if in.Errors != nil {
		in, out := &in.Errors, &out.Errors
		*out = new(int64)
		**out = **in
	}
	if in.ExecutionTime != nil {
		in, out := &in.ExecutionTime, &out.ExecutionTime
		*out = new(int64)
		**out = **in
	}
	if in.IntervalDuration != nil {
		in, out := &in.IntervalDuration, &out.IntervalDuration
		*out = new(int64)
		**out = **in
	}
	if in.Queries != nil {
		in, out := &in.Queries, &out.Queries
		*out = new(int64)
		**out = **in
	}
	if in.ReadRows != nil {
		in, out := &in.ReadRows, &out.ReadRows
		*out = new(int64)
		**out = **in
	}
	if in.ResultRows != nil {
		in, out := &in.ResultRows, &out.ResultRows
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new QuotaParameters.
func (in *QuotaParameters) DeepCopy() *QuotaParameters {
	if in == nil {
		return nil
	}
	out := new(QuotaParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RabbitmqObservation) DeepCopyInto(out *RabbitmqObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RabbitmqObservation.
func (in *RabbitmqObservation) DeepCopy() *RabbitmqObservation {
	if in == nil {
		return nil
	}
	out := new(RabbitmqObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RabbitmqParameters) DeepCopyInto(out *RabbitmqParameters) {
	*out = *in
	if in.PasswordSecretRef != nil {
		in, out := &in.PasswordSecretRef, &out.PasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Username != nil {
		in, out := &in.Username, &out.Username
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RabbitmqParameters.
func (in *RabbitmqParameters) DeepCopy() *RabbitmqParameters {
	if in == nil {
		return nil
	}
	out := new(RabbitmqParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisCluster) DeepCopyInto(out *RedisCluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisCluster.
func (in *RedisCluster) DeepCopy() *RedisCluster {
	if in == nil {
		return nil
	}
	out := new(RedisCluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RedisCluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterConfigObservation) DeepCopyInto(out *RedisClusterConfigObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterConfigObservation.
func (in *RedisClusterConfigObservation) DeepCopy() *RedisClusterConfigObservation {
	if in == nil {
		return nil
	}
	out := new(RedisClusterConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterConfigParameters) DeepCopyInto(out *RedisClusterConfigParameters) {
	*out = *in
	if in.Databases != nil {
		in, out := &in.Databases, &out.Databases
		*out = new(int64)
		**out = **in
	}
	if in.MaxmemoryPolicy != nil {
		in, out := &in.MaxmemoryPolicy, &out.MaxmemoryPolicy
		*out = new(string)
		**out = **in
	}
	if in.NotifyKeyspaceEvents != nil {
		in, out := &in.NotifyKeyspaceEvents, &out.NotifyKeyspaceEvents
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.SlowlogLogSlowerThan != nil {
		in, out := &in.SlowlogLogSlowerThan, &out.SlowlogLogSlowerThan
		*out = new(int64)
		**out = **in
	}
	if in.SlowlogMaxLen != nil {
		in, out := &in.SlowlogMaxLen, &out.SlowlogMaxLen
		*out = new(int64)
		**out = **in
	}
	if in.Timeout != nil {
		in, out := &in.Timeout, &out.Timeout
		*out = new(int64)
		**out = **in
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterConfigParameters.
func (in *RedisClusterConfigParameters) DeepCopy() *RedisClusterConfigParameters {
	if in == nil {
		return nil
	}
	out := new(RedisClusterConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterHostObservation) DeepCopyInto(out *RedisClusterHostObservation) {
	*out = *in
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterHostObservation.
func (in *RedisClusterHostObservation) DeepCopy() *RedisClusterHostObservation {
	if in == nil {
		return nil
	}
	out := new(RedisClusterHostObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterHostParameters) DeepCopyInto(out *RedisClusterHostParameters) {
	*out = *in
	if in.ShardName != nil {
		in, out := &in.ShardName, &out.ShardName
		*out = new(string)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterHostParameters.
func (in *RedisClusterHostParameters) DeepCopy() *RedisClusterHostParameters {
	if in == nil {
		return nil
	}
	out := new(RedisClusterHostParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterList) DeepCopyInto(out *RedisClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RedisCluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterList.
func (in *RedisClusterList) DeepCopy() *RedisClusterList {
	if in == nil {
		return nil
	}
	out := new(RedisClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RedisClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterMaintenanceWindowObservation) DeepCopyInto(out *RedisClusterMaintenanceWindowObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterMaintenanceWindowObservation.
func (in *RedisClusterMaintenanceWindowObservation) DeepCopy() *RedisClusterMaintenanceWindowObservation {
	if in == nil {
		return nil
	}
	out := new(RedisClusterMaintenanceWindowObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterMaintenanceWindowParameters) DeepCopyInto(out *RedisClusterMaintenanceWindowParameters) {
	*out = *in
	if in.Day != nil {
		in, out := &in.Day, &out.Day
		*out = new(string)
		**out = **in
	}
	if in.Hour != nil {
		in, out := &in.Hour, &out.Hour
		*out = new(int64)
		**out = **in
	}
	if in.Type != nil {
		in, out := &in.Type, &out.Type
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterMaintenanceWindowParameters.
func (in *RedisClusterMaintenanceWindowParameters) DeepCopy() *RedisClusterMaintenanceWindowParameters {
	if in == nil {
		return nil
	}
	out := new(RedisClusterMaintenanceWindowParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterObservation) DeepCopyInto(out *RedisClusterObservation) {
	*out = *in
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.Health != nil {
		in, out := &in.Health, &out.Health
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterObservation.
func (in *RedisClusterObservation) DeepCopy() *RedisClusterObservation {
	if in == nil {
		return nil
	}
	out := new(RedisClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterParameters) DeepCopyInto(out *RedisClusterParameters) {
	*out = *in
	if in.Config != nil {
		in, out := &in.Config, &out.Config
		*out = make([]RedisClusterConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.FolderIDRef != nil {
		in, out := &in.FolderIDRef, &out.FolderIDRef
		*out = new(v1.Reference)
		**out = **in
	}
	if in.FolderIDSelector != nil {
		in, out := &in.FolderIDSelector, &out.FolderIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]RedisClusterHostParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.MaintenanceWindow != nil {
		in, out := &in.MaintenanceWindow, &out.MaintenanceWindow
		*out = make([]RedisClusterMaintenanceWindowParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.NetworkIDRef != nil {
		in, out := &in.NetworkIDRef, &out.NetworkIDRef
		*out = new(v1.Reference)
		**out = **in
	}
	if in.NetworkIDSelector != nil {
		in, out := &in.NetworkIDSelector, &out.NetworkIDSelector
		*out = new(v1.Selector)
		(*in).DeepCopyInto(*out)
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]RedisClusterResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.Sharded != nil {
		in, out := &in.Sharded, &out.Sharded
		*out = new(bool)
		**out = **in
	}
	if in.TLSEnabled != nil {
		in, out := &in.TLSEnabled, &out.TLSEnabled
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterParameters.
func (in *RedisClusterParameters) DeepCopy() *RedisClusterParameters {
	if in == nil {
		return nil
	}
	out := new(RedisClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterResourcesObservation) DeepCopyInto(out *RedisClusterResourcesObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterResourcesObservation.
func (in *RedisClusterResourcesObservation) DeepCopy() *RedisClusterResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(RedisClusterResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterResourcesParameters) DeepCopyInto(out *RedisClusterResourcesParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterResourcesParameters.
func (in *RedisClusterResourcesParameters) DeepCopy() *RedisClusterResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(RedisClusterResourcesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterSpec) DeepCopyInto(out *RedisClusterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterSpec.
func (in *RedisClusterSpec) DeepCopy() *RedisClusterSpec {
	if in == nil {
		return nil
	}
	out := new(RedisClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedisClusterStatus) DeepCopyInto(out *RedisClusterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedisClusterStatus.
func (in *RedisClusterStatus) DeepCopy() *RedisClusterStatus {
	if in == nil {
		return nil
	}
	out := new(RedisClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourcesObservation) DeepCopyInto(out *ResourcesObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourcesObservation.
func (in *ResourcesObservation) DeepCopy() *ResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(ResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ResourcesParameters) DeepCopyInto(out *ResourcesParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ResourcesParameters.
func (in *ResourcesParameters) DeepCopy() *ResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(ResourcesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RestoreObservation) DeepCopyInto(out *RestoreObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RestoreObservation.
func (in *RestoreObservation) DeepCopy() *RestoreObservation {
	if in == nil {
		return nil
	}
	out := new(RestoreObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RestoreParameters) DeepCopyInto(out *RestoreParameters) {
	*out = *in
	if in.BackupID != nil {
		in, out := &in.BackupID, &out.BackupID
		*out = new(string)
		**out = **in
	}
	if in.Time != nil {
		in, out := &in.Time, &out.Time
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RestoreParameters.
func (in *RestoreParameters) DeepCopy() *RestoreParameters {
	if in == nil {
		return nil
	}
	out := new(RestoreParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RetentionObservation) DeepCopyInto(out *RetentionObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RetentionObservation.
func (in *RetentionObservation) DeepCopy() *RetentionObservation {
	if in == nil {
		return nil
	}
	out := new(RetentionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RetentionParameters) DeepCopyInto(out *RetentionParameters) {
	*out = *in
	if in.Age != nil {
		in, out := &in.Age, &out.Age
		*out = new(int64)
		**out = **in
	}
	if in.Precision != nil {
		in, out := &in.Precision, &out.Precision
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RetentionParameters.
func (in *RetentionParameters) DeepCopy() *RetentionParameters {
	if in == nil {
		return nil
	}
	out := new(RetentionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SegmentHostsObservation) DeepCopyInto(out *SegmentHostsObservation) {
	*out = *in
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SegmentHostsObservation.
func (in *SegmentHostsObservation) DeepCopy() *SegmentHostsObservation {
	if in == nil {
		return nil
	}
	out := new(SegmentHostsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SegmentHostsParameters) DeepCopyInto(out *SegmentHostsParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SegmentHostsParameters.
func (in *SegmentHostsParameters) DeepCopy() *SegmentHostsParameters {
	if in == nil {
		return nil
	}
	out := new(SegmentHostsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SegmentSubclusterObservation) DeepCopyInto(out *SegmentSubclusterObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SegmentSubclusterObservation.
func (in *SegmentSubclusterObservation) DeepCopy() *SegmentSubclusterObservation {
	if in == nil {
		return nil
	}
	out := new(SegmentSubclusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SegmentSubclusterParameters) DeepCopyInto(out *SegmentSubclusterParameters) {
	*out = *in
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]SegmentSubclusterResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SegmentSubclusterParameters.
func (in *SegmentSubclusterParameters) DeepCopy() *SegmentSubclusterParameters {
	if in == nil {
		return nil
	}
	out := new(SegmentSubclusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SegmentSubclusterResourcesObservation) DeepCopyInto(out *SegmentSubclusterResourcesObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SegmentSubclusterResourcesObservation.
func (in *SegmentSubclusterResourcesObservation) DeepCopy() *SegmentSubclusterResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(SegmentSubclusterResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SegmentSubclusterResourcesParameters) DeepCopyInto(out *SegmentSubclusterResourcesParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SegmentSubclusterResourcesParameters.
func (in *SegmentSubclusterResourcesParameters) DeepCopy() *SegmentSubclusterResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(SegmentSubclusterResourcesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SettingsObservation) DeepCopyInto(out *SettingsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SettingsObservation.
func (in *SettingsObservation) DeepCopy() *SettingsObservation {
	if in == nil {
		return nil
	}
	out := new(SettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SettingsParameters) DeepCopyInto(out *SettingsParameters) {
	*out = *in
	if in.SaslMechanism != nil {
		in, out := &in.SaslMechanism, &out.SaslMechanism
		*out = new(string)
		**out = **in
	}
	if in.SaslPasswordSecretRef != nil {
		in, out := &in.SaslPasswordSecretRef, &out.SaslPasswordSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.SaslUsername != nil {
		in, out := &in.SaslUsername, &out.SaslUsername
		*out = new(string)
		**out = **in
	}
	if in.SecurityProtocol != nil {
		in, out := &in.SecurityProtocol, &out.SecurityProtocol
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SettingsParameters.
func (in *SettingsParameters) DeepCopy() *SettingsParameters {
	if in == nil {
		return nil
	}
	out := new(SettingsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ShardGroupObservation) DeepCopyInto(out *ShardGroupObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ShardGroupObservation.
func (in *ShardGroupObservation) DeepCopy() *ShardGroupObservation {
	if in == nil {
		return nil
	}
	out := new(ShardGroupObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ShardGroupParameters) DeepCopyInto(out *ShardGroupParameters) {
	*out = *in
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ShardNames != nil {
		in, out := &in.ShardNames, &out.ShardNames
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ShardGroupParameters.
func (in *ShardGroupParameters) DeepCopy() *ShardGroupParameters {
	if in == nil {
		return nil
	}
	out := new(ShardGroupParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SqlserverCluster) DeepCopyInto(out *SqlserverCluster) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SqlserverCluster.
func (in *SqlserverCluster) DeepCopy() *SqlserverCluster {
	if in == nil {
		return nil
	}
	out := new(SqlserverCluster)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SqlserverCluster) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SqlserverClusterBackupWindowStartObservation) DeepCopyInto(out *SqlserverClusterBackupWindowStartObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SqlserverClusterBackupWindowStartObservation.
func (in *SqlserverClusterBackupWindowStartObservation) DeepCopy() *SqlserverClusterBackupWindowStartObservation {
	if in == nil {
		return nil
	}
	out := new(SqlserverClusterBackupWindowStartObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SqlserverClusterBackupWindowStartParameters) DeepCopyInto(out *SqlserverClusterBackupWindowStartParameters) {
	*out = *in
	if in.Hours != nil {
		in, out := &in.Hours, &out.Hours
		*out = new(int64)
		**out = **in
	}
	if in.Minutes != nil {
		in, out := &in.Minutes, &out.Minutes
		*out = new(int64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SqlserverClusterBackupWindowStartParameters.
func (in *SqlserverClusterBackupWindowStartParameters) DeepCopy() *SqlserverClusterBackupWindowStartParameters {
	if in == nil {
		return nil
	}
	out := new(SqlserverClusterBackupWindowStartParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SqlserverClusterDatabaseObservation) DeepCopyInto(out *SqlserverClusterDatabaseObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SqlserverClusterDatabaseObservation.
func (in *SqlserverClusterDatabaseObservation) DeepCopy() *SqlserverClusterDatabaseObservation {
	if in == nil {
		return nil
	}
	out := new(SqlserverClusterDatabaseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SqlserverClusterDatabaseParameters) DeepCopyInto(out *SqlserverClusterDatabaseParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SqlserverClusterDatabaseParameters.
func (in *SqlserverClusterDatabaseParameters) DeepCopy() *SqlserverClusterDatabaseParameters {
	if in == nil {
		return nil
	}
	out := new(SqlserverClusterDatabaseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SqlserverClusterHostObservation) DeepCopyInto(out *SqlserverClusterHostObservation) {
	*out = *in
	if in.Fqdn != nil {
		in, out := &in.Fqdn, &out.Fqdn
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SqlserverClusterHostObservation.
func (in *SqlserverClusterHostObservation) DeepCopy() *SqlserverClusterHostObservation {
	if in == nil {
		return nil
	}
	out := new(SqlserverClusterHostObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SqlserverClusterHostParameters) DeepCopyInto(out *SqlserverClusterHostParameters) {
	*out = *in
	if in.AssignPublicIP != nil {
		in, out := &in.AssignPublicIP, &out.AssignPublicIP
		*out = new(bool)
		**out = **in
	}
	if in.SubnetID != nil {
		in, out := &in.SubnetID, &out.SubnetID
		*out = new(string)
		**out = **in
	}
	if in.Zone != nil {
		in, out := &in.Zone, &out.Zone
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SqlserverClusterHostParameters.
func (in *SqlserverClusterHostParameters) DeepCopy() *SqlserverClusterHostParameters {
	if in == nil {
		return nil
	}
	out := new(SqlserverClusterHostParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SqlserverClusterList) DeepCopyInto(out *SqlserverClusterList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]SqlserverCluster, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SqlserverClusterList.
func (in *SqlserverClusterList) DeepCopy() *SqlserverClusterList {
	if in == nil {
		return nil
	}
	out := new(SqlserverClusterList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *SqlserverClusterList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SqlserverClusterObservation) DeepCopyInto(out *SqlserverClusterObservation) {
	*out = *in
	if in.CreatedAt != nil {
		in, out := &in.CreatedAt, &out.CreatedAt
		*out = new(string)
		**out = **in
	}
	if in.Health != nil {
		in, out := &in.Health, &out.Health
		*out = new(string)
		**out = **in
	}
	if in.Status != nil {
		in, out := &in.Status, &out.Status
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SqlserverClusterObservation.
func (in *SqlserverClusterObservation) DeepCopy() *SqlserverClusterObservation {
	if in == nil {
		return nil
	}
	out := new(SqlserverClusterObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SqlserverClusterParameters) DeepCopyInto(out *SqlserverClusterParameters) {
	*out = *in
	if in.BackupWindowStart != nil {
		in, out := &in.BackupWindowStart, &out.BackupWindowStart
		*out = make([]SqlserverClusterBackupWindowStartParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = make([]SqlserverClusterDatabaseParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.DeletionProtection != nil {
		in, out := &in.DeletionProtection, &out.DeletionProtection
		*out = new(bool)
		**out = **in
	}
	if in.Description != nil {
		in, out := &in.Description, &out.Description
		*out = new(string)
		**out = **in
	}
	if in.Environment != nil {
		in, out := &in.Environment, &out.Environment
		*out = new(string)
		**out = **in
	}
	if in.FolderID != nil {
		in, out := &in.FolderID, &out.FolderID
		*out = new(string)
		**out = **in
	}
	if in.Host != nil {
		in, out := &in.Host, &out.Host
		*out = make([]SqlserverClusterHostParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Labels != nil {
		in, out := &in.Labels, &out.Labels
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NetworkID != nil {
		in, out := &in.NetworkID, &out.NetworkID
		*out = new(string)
		**out = **in
	}
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]SqlserverClusterResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.SecurityGroupIds != nil {
		in, out := &in.SecurityGroupIds, &out.SecurityGroupIds
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.SqlserverConfig != nil {
		in, out := &in.SqlserverConfig, &out.SqlserverConfig
		*out = make(map[string]*string, len(*in))
		for key, val := range *in {
			var outVal *string
			if val == nil {
				(*out)[key] = nil
			} else {
				in, out := &val, &outVal
				*out = new(string)
				**out = **in
			}
			(*out)[key] = outVal
		}
	}
	if in.User != nil {
		in, out := &in.User, &out.User
		*out = make([]SqlserverClusterUserParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Version != nil {
		in, out := &in.Version, &out.Version
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SqlserverClusterParameters.
func (in *SqlserverClusterParameters) DeepCopy() *SqlserverClusterParameters {
	if in == nil {
		return nil
	}
	out := new(SqlserverClusterParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SqlserverClusterResourcesObservation) DeepCopyInto(out *SqlserverClusterResourcesObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SqlserverClusterResourcesObservation.
func (in *SqlserverClusterResourcesObservation) DeepCopy() *SqlserverClusterResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(SqlserverClusterResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SqlserverClusterResourcesParameters) DeepCopyInto(out *SqlserverClusterResourcesParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SqlserverClusterResourcesParameters.
func (in *SqlserverClusterResourcesParameters) DeepCopy() *SqlserverClusterResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(SqlserverClusterResourcesParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SqlserverClusterSpec) DeepCopyInto(out *SqlserverClusterSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SqlserverClusterSpec.
func (in *SqlserverClusterSpec) DeepCopy() *SqlserverClusterSpec {
	if in == nil {
		return nil
	}
	out := new(SqlserverClusterSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SqlserverClusterStatus) DeepCopyInto(out *SqlserverClusterStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SqlserverClusterStatus.
func (in *SqlserverClusterStatus) DeepCopy() *SqlserverClusterStatus {
	if in == nil {
		return nil
	}
	out := new(SqlserverClusterStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SqlserverClusterUserObservation) DeepCopyInto(out *SqlserverClusterUserObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SqlserverClusterUserObservation.
func (in *SqlserverClusterUserObservation) DeepCopy() *SqlserverClusterUserObservation {
	if in == nil {
		return nil
	}
	out := new(SqlserverClusterUserObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SqlserverClusterUserParameters) DeepCopyInto(out *SqlserverClusterUserParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]SqlserverClusterUserPermissionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SqlserverClusterUserParameters.
func (in *SqlserverClusterUserParameters) DeepCopy() *SqlserverClusterUserParameters {
	if in == nil {
		return nil
	}
	out := new(SqlserverClusterUserParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SqlserverClusterUserPermissionObservation) DeepCopyInto(out *SqlserverClusterUserPermissionObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SqlserverClusterUserPermissionObservation.
func (in *SqlserverClusterUserPermissionObservation) DeepCopy() *SqlserverClusterUserPermissionObservation {
	if in == nil {
		return nil
	}
	out := new(SqlserverClusterUserPermissionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *SqlserverClusterUserPermissionParameters) DeepCopyInto(out *SqlserverClusterUserPermissionParameters) {
	*out = *in
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.Roles != nil {
		in, out := &in.Roles, &out.Roles
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new SqlserverClusterUserPermissionParameters.
func (in *SqlserverClusterUserPermissionParameters) DeepCopy() *SqlserverClusterUserPermissionParameters {
	if in == nil {
		return nil
	}
	out := new(SqlserverClusterUserPermissionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicConfigObservation) DeepCopyInto(out *TopicConfigObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicConfigObservation.
func (in *TopicConfigObservation) DeepCopy() *TopicConfigObservation {
	if in == nil {
		return nil
	}
	out := new(TopicConfigObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicConfigParameters) DeepCopyInto(out *TopicConfigParameters) {
	*out = *in
	if in.CleanupPolicy != nil {
		in, out := &in.CleanupPolicy, &out.CleanupPolicy
		*out = new(string)
		**out = **in
	}
	if in.CompressionType != nil {
		in, out := &in.CompressionType, &out.CompressionType
		*out = new(string)
		**out = **in
	}
	if in.DeleteRetentionMs != nil {
		in, out := &in.DeleteRetentionMs, &out.DeleteRetentionMs
		*out = new(string)
		**out = **in
	}
	if in.FileDeleteDelayMs != nil {
		in, out := &in.FileDeleteDelayMs, &out.FileDeleteDelayMs
		*out = new(string)
		**out = **in
	}
	if in.FlushMessages != nil {
		in, out := &in.FlushMessages, &out.FlushMessages
		*out = new(string)
		**out = **in
	}
	if in.FlushMs != nil {
		in, out := &in.FlushMs, &out.FlushMs
		*out = new(string)
		**out = **in
	}
	if in.MaxMessageBytes != nil {
		in, out := &in.MaxMessageBytes, &out.MaxMessageBytes
		*out = new(string)
		**out = **in
	}
	if in.MinCompactionLagMs != nil {
		in, out := &in.MinCompactionLagMs, &out.MinCompactionLagMs
		*out = new(string)
		**out = **in
	}
	if in.MinInsyncReplicas != nil {
		in, out := &in.MinInsyncReplicas, &out.MinInsyncReplicas
		*out = new(string)
		**out = **in
	}
	if in.Preallocate != nil {
		in, out := &in.Preallocate, &out.Preallocate
		*out = new(bool)
		**out = **in
	}
	if in.RetentionBytes != nil {
		in, out := &in.RetentionBytes, &out.RetentionBytes
		*out = new(string)
		**out = **in
	}
	if in.RetentionMs != nil {
		in, out := &in.RetentionMs, &out.RetentionMs
		*out = new(string)
		**out = **in
	}
	if in.SegmentBytes != nil {
		in, out := &in.SegmentBytes, &out.SegmentBytes
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicConfigParameters.
func (in *TopicConfigParameters) DeepCopy() *TopicConfigParameters {
	if in == nil {
		return nil
	}
	out := new(TopicConfigParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicObservation) DeepCopyInto(out *TopicObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicObservation.
func (in *TopicObservation) DeepCopy() *TopicObservation {
	if in == nil {
		return nil
	}
	out := new(TopicObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TopicParameters) DeepCopyInto(out *TopicParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Partitions != nil {
		in, out := &in.Partitions, &out.Partitions
		*out = new(int64)
		**out = **in
	}
	if in.ReplicationFactor != nil {
		in, out := &in.ReplicationFactor, &out.ReplicationFactor
		*out = new(int64)
		**out = **in
	}
	if in.TopicConfig != nil {
		in, out := &in.TopicConfig, &out.TopicConfig
		*out = make([]TopicConfigParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TopicParameters.
func (in *TopicParameters) DeepCopy() *TopicParameters {
	if in == nil {
		return nil
	}
	out := new(TopicParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserObservation) DeepCopyInto(out *UserObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserObservation.
func (in *UserObservation) DeepCopy() *UserObservation {
	if in == nil {
		return nil
	}
	out := new(UserObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserParameters) DeepCopyInto(out *UserParameters) {
	*out = *in
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	out.PasswordSecretRef = in.PasswordSecretRef
	if in.Permission != nil {
		in, out := &in.Permission, &out.Permission
		*out = make([]PermissionParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Quota != nil {
		in, out := &in.Quota, &out.Quota
		*out = make([]QuotaParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.Settings != nil {
		in, out := &in.Settings, &out.Settings
		*out = make([]UserSettingsParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserParameters.
func (in *UserParameters) DeepCopy() *UserParameters {
	if in == nil {
		return nil
	}
	out := new(UserParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserPermissionObservation) DeepCopyInto(out *UserPermissionObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserPermissionObservation.
func (in *UserPermissionObservation) DeepCopy() *UserPermissionObservation {
	if in == nil {
		return nil
	}
	out := new(UserPermissionObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserPermissionParameters) DeepCopyInto(out *UserPermissionParameters) {
	*out = *in
	if in.Role != nil {
		in, out := &in.Role, &out.Role
		*out = new(string)
		**out = **in
	}
	if in.TopicName != nil {
		in, out := &in.TopicName, &out.TopicName
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserPermissionParameters.
func (in *UserPermissionParameters) DeepCopy() *UserPermissionParameters {
	if in == nil {
		return nil
	}
	out := new(UserPermissionParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserSettingsObservation) DeepCopyInto(out *UserSettingsObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserSettingsObservation.
func (in *UserSettingsObservation) DeepCopy() *UserSettingsObservation {
	if in == nil {
		return nil
	}
	out := new(UserSettingsObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *UserSettingsParameters) DeepCopyInto(out *UserSettingsParameters) {
	*out = *in
	if in.AddHTTPCorsHeader != nil {
		in, out := &in.AddHTTPCorsHeader, &out.AddHTTPCorsHeader
		*out = new(bool)
		**out = **in
	}
	if in.AllowDdl != nil {
		in, out := &in.AllowDdl, &out.AllowDdl
		*out = new(bool)
		**out = **in
	}
	if in.Compile != nil {
		in, out := &in.Compile, &out.Compile
		*out = new(bool)
		**out = **in
	}
	if in.CompileExpressions != nil {
		in, out := &in.CompileExpressions, &out.CompileExpressions
		*out = new(bool)
		**out = **in
	}
	if in.ConnectTimeout != nil {
		in, out := &in.ConnectTimeout, &out.ConnectTimeout
		*out = new(int64)
		**out = **in
	}
	if in.CountDistinctImplementation != nil {
		in, out := &in.CountDistinctImplementation, &out.CountDistinctImplementation
		*out = new(string)
		**out = **in
	}
	if in.DistinctOverflowMode != nil {
		in, out := &in.DistinctOverflowMode, &out.DistinctOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.DistributedAggregationMemoryEfficient != nil {
		in, out := &in.DistributedAggregationMemoryEfficient, &out.DistributedAggregationMemoryEfficient
		*out = new(bool)
		**out = **in
	}
	if in.DistributedDdlTaskTimeout != nil {
		in, out := &in.DistributedDdlTaskTimeout, &out.DistributedDdlTaskTimeout
		*out = new(int64)
		**out = **in
	}
	if in.DistributedProductMode != nil {
		in, out := &in.DistributedProductMode, &out.DistributedProductMode
		*out = new(string)
		**out = **in
	}
	if in.EmptyResultForAggregationByEmptySet != nil {
		in, out := &in.EmptyResultForAggregationByEmptySet, &out.EmptyResultForAggregationByEmptySet
		*out = new(bool)
		**out = **in
	}
	if in.EnableHTTPCompression != nil {
		in, out := &in.EnableHTTPCompression, &out.EnableHTTPCompression
		*out = new(bool)
		**out = **in
	}
	if in.FallbackToStaleReplicasForDistributedQueries != nil {
		in, out := &in.FallbackToStaleReplicasForDistributedQueries, &out.FallbackToStaleReplicasForDistributedQueries
		*out = new(bool)
		**out = **in
	}
	if in.ForceIndexByDate != nil {
		in, out := &in.ForceIndexByDate, &out.ForceIndexByDate
		*out = new(bool)
		**out = **in
	}
	if in.ForcePrimaryKey != nil {
		in, out := &in.ForcePrimaryKey, &out.ForcePrimaryKey
		*out = new(bool)
		**out = **in
	}
	if in.GroupByOverflowMode != nil {
		in, out := &in.GroupByOverflowMode, &out.GroupByOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.GroupByTwoLevelThreshold != nil {
		in, out := &in.GroupByTwoLevelThreshold, &out.GroupByTwoLevelThreshold
		*out = new(int64)
		**out = **in
	}
	if in.GroupByTwoLevelThresholdBytes != nil {
		in, out := &in.GroupByTwoLevelThresholdBytes, &out.GroupByTwoLevelThresholdBytes
		*out = new(int64)
		**out = **in
	}
	if in.HTTPConnectionTimeout != nil {
		in, out := &in.HTTPConnectionTimeout, &out.HTTPConnectionTimeout
		*out = new(int64)
		**out = **in
	}
	if in.HTTPHeadersProgressInterval != nil {
		in, out := &in.HTTPHeadersProgressInterval, &out.HTTPHeadersProgressInterval
		*out = new(int64)
		**out = **in
	}
	if in.HTTPReceiveTimeout != nil {
		in, out := &in.HTTPReceiveTimeout, &out.HTTPReceiveTimeout
		*out = new(int64)
		**out = **in
	}
	if in.HTTPSendTimeout != nil {
		in, out := &in.HTTPSendTimeout, &out.HTTPSendTimeout
		*out = new(int64)
		**out = **in
	}
	if in.InputFormatDefaultsForOmittedFields != nil {
		in, out := &in.InputFormatDefaultsForOmittedFields, &out.InputFormatDefaultsForOmittedFields
		*out = new(bool)
		**out = **in
	}
	if in.InputFormatValuesInterpretExpressions != nil {
		in, out := &in.InputFormatValuesInterpretExpressions, &out.InputFormatValuesInterpretExpressions
		*out = new(bool)
		**out = **in
	}
	if in.InsertQuorum != nil {
		in, out := &in.InsertQuorum, &out.InsertQuorum
		*out = new(int64)
		**out = **in
	}
	if in.InsertQuorumTimeout != nil {
		in, out := &in.InsertQuorumTimeout, &out.InsertQuorumTimeout
		*out = new(int64)
		**out = **in
	}
	if in.JoinOverflowMode != nil {
		in, out := &in.JoinOverflowMode, &out.JoinOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.JoinUseNulls != nil {
		in, out := &in.JoinUseNulls, &out.JoinUseNulls
		*out = new(bool)
		**out = **in
	}
	if in.JoinedSubqueryRequiresAlias != nil {
		in, out := &in.JoinedSubqueryRequiresAlias, &out.JoinedSubqueryRequiresAlias
		*out = new(bool)
		**out = **in
	}
	if in.LowCardinalityAllowInNativeFormat != nil {
		in, out := &in.LowCardinalityAllowInNativeFormat, &out.LowCardinalityAllowInNativeFormat
		*out = new(bool)
		**out = **in
	}
	if in.MaxAstDepth != nil {
		in, out := &in.MaxAstDepth, &out.MaxAstDepth
		*out = new(int64)
		**out = **in
	}
	if in.MaxAstElements != nil {
		in, out := &in.MaxAstElements, &out.MaxAstElements
		*out = new(int64)
		**out = **in
	}
	if in.MaxBlockSize != nil {
		in, out := &in.MaxBlockSize, &out.MaxBlockSize
		*out = new(int64)
		**out = **in
	}
	if in.MaxBytesBeforeExternalGroupBy != nil {
		in, out := &in.MaxBytesBeforeExternalGroupBy, &out.MaxBytesBeforeExternalGroupBy
		*out = new(int64)
		**out = **in
	}
	if in.MaxBytesBeforeExternalSort != nil {
		in, out := &in.MaxBytesBeforeExternalSort, &out.MaxBytesBeforeExternalSort
		*out = new(int64)
		**out = **in
	}
	if in.MaxBytesInDistinct != nil {
		in, out := &in.MaxBytesInDistinct, &out.MaxBytesInDistinct
		*out = new(int64)
		**out = **in
	}
	if in.MaxBytesInJoin != nil {
		in, out := &in.MaxBytesInJoin, &out.MaxBytesInJoin
		*out = new(int64)
		**out = **in
	}
	if in.MaxBytesInSet != nil {
		in, out := &in.MaxBytesInSet, &out.MaxBytesInSet
		*out = new(int64)
		**out = **in
	}
	if in.MaxBytesToRead != nil {
		in, out := &in.MaxBytesToRead, &out.MaxBytesToRead
		*out = new(int64)
		**out = **in
	}
	if in.MaxBytesToSort != nil {
		in, out := &in.MaxBytesToSort, &out.MaxBytesToSort
		*out = new(int64)
		**out = **in
	}
	if in.MaxBytesToTransfer != nil {
		in, out := &in.MaxBytesToTransfer, &out.MaxBytesToTransfer
		*out = new(int64)
		**out = **in
	}
	if in.MaxColumnsToRead != nil {
		in, out := &in.MaxColumnsToRead, &out.MaxColumnsToRead
		*out = new(int64)
		**out = **in
	}
	if in.MaxExecutionTime != nil {
		in, out := &in.MaxExecutionTime, &out.MaxExecutionTime
		*out = new(int64)
		**out = **in
	}
	if in.MaxExpandedAstElements != nil {
		in, out := &in.MaxExpandedAstElements, &out.MaxExpandedAstElements
		*out = new(int64)
		**out = **in
	}
	if in.MaxInsertBlockSize != nil {
		in, out := &in.MaxInsertBlockSize, &out.MaxInsertBlockSize
		*out = new(int64)
		**out = **in
	}
	if in.MaxMemoryUsage != nil {
		in, out := &in.MaxMemoryUsage, &out.MaxMemoryUsage
		*out = new(int64)
		**out = **in
	}
	if in.MaxMemoryUsageForUser != nil {
		in, out := &in.MaxMemoryUsageForUser, &out.MaxMemoryUsageForUser
		*out = new(int64)
		**out = **in
	}
	if in.MaxNetworkBandwidth != nil {
		in, out := &in.MaxNetworkBandwidth, &out.MaxNetworkBandwidth
		*out = new(int64)
		**out = **in
	}
	if in.MaxNetworkBandwidthForUser != nil {
		in, out := &in.MaxNetworkBandwidthForUser, &out.MaxNetworkBandwidthForUser
		*out = new(int64)
		**out = **in
	}
	if in.MaxQuerySize != nil {
		in, out := &in.MaxQuerySize, &out.MaxQuerySize
		*out = new(int64)
		**out = **in
	}
	if in.MaxReplicaDelayForDistributedQueries != nil {
		in, out := &in.MaxReplicaDelayForDistributedQueries, &out.MaxReplicaDelayForDistributedQueries
		*out = new(int64)
		**out = **in
	}
	if in.MaxResultBytes != nil {
		in, out := &in.MaxResultBytes, &out.MaxResultBytes
		*out = new(int64)
		**out = **in
	}
	if in.MaxResultRows != nil {
		in, out := &in.MaxResultRows, &out.MaxResultRows
		*out = new(int64)
		**out = **in
	}
	if in.MaxRowsInDistinct != nil {
		in, out := &in.MaxRowsInDistinct, &out.MaxRowsInDistinct
		*out = new(int64)
		**out = **in
	}
	if in.MaxRowsInJoin != nil {
		in, out := &in.MaxRowsInJoin, &out.MaxRowsInJoin
		*out = new(int64)
		**out = **in
	}
	if in.MaxRowsInSet != nil {
		in, out := &in.MaxRowsInSet, &out.MaxRowsInSet
		*out = new(int64)
		**out = **in
	}
	if in.MaxRowsToGroupBy != nil {
		in, out := &in.MaxRowsToGroupBy, &out.MaxRowsToGroupBy
		*out = new(int64)
		**out = **in
	}
	if in.MaxRowsToRead != nil {
		in, out := &in.MaxRowsToRead, &out.MaxRowsToRead
		*out = new(int64)
		**out = **in
	}
	if in.MaxRowsToSort != nil {
		in, out := &in.MaxRowsToSort, &out.MaxRowsToSort
		*out = new(int64)
		**out = **in
	}
	if in.MaxRowsToTransfer != nil {
		in, out := &in.MaxRowsToTransfer, &out.MaxRowsToTransfer
		*out = new(int64)
		**out = **in
	}
	if in.MaxTemporaryColumns != nil {
		in, out := &in.MaxTemporaryColumns, &out.MaxTemporaryColumns
		*out = new(int64)
		**out = **in
	}
	if in.MaxTemporaryNonConstColumns != nil {
		in, out := &in.MaxTemporaryNonConstColumns, &out.MaxTemporaryNonConstColumns
		*out = new(int64)
		**out = **in
	}
	if in.MaxThreads != nil {
		in, out := &in.MaxThreads, &out.MaxThreads
		*out = new(int64)
		**out = **in
	}
	if in.MergeTreeMaxBytesToUseCache != nil {
		in, out := &in.MergeTreeMaxBytesToUseCache, &out.MergeTreeMaxBytesToUseCache
		*out = new(int64)
		**out = **in
	}
	if in.MergeTreeMaxRowsToUseCache != nil {
		in, out := &in.MergeTreeMaxRowsToUseCache, &out.MergeTreeMaxRowsToUseCache
		*out = new(int64)
		**out = **in
	}
	if in.MergeTreeMinBytesForConcurrentRead != nil {
		in, out := &in.MergeTreeMinBytesForConcurrentRead, &out.MergeTreeMinBytesForConcurrentRead
		*out = new(int64)
		**out = **in
	}
	if in.MergeTreeMinRowsForConcurrentRead != nil {
		in, out := &in.MergeTreeMinRowsForConcurrentRead, &out.MergeTreeMinRowsForConcurrentRead
		*out = new(int64)
		**out = **in
	}
	if in.MinBytesToUseDirectIo != nil {
		in, out := &in.MinBytesToUseDirectIo, &out.MinBytesToUseDirectIo
		*out = new(int64)
		**out = **in
	}
	if in.MinCountToCompile != nil {
		in, out := &in.MinCountToCompile, &out.MinCountToCompile
		*out = new(int64)
		**out = **in
	}
	if in.MinCountToCompileExpression != nil {
		in, out := &in.MinCountToCompileExpression, &out.MinCountToCompileExpression
		*out = new(int64)
		**out = **in
	}
	if in.MinExecutionSpeed != nil {
		in, out := &in.MinExecutionSpeed, &out.MinExecutionSpeed
		*out = new(int64)
		**out = **in
	}
	if in.MinExecutionSpeedBytes != nil {
		in, out := &in.MinExecutionSpeedBytes, &out.MinExecutionSpeedBytes
		*out = new(int64)
		**out = **in
	}
	if in.MinInsertBlockSizeBytes != nil {
		in, out := &in.MinInsertBlockSizeBytes, &out.MinInsertBlockSizeBytes
		*out = new(int64)
		**out = **in
	}
	if in.MinInsertBlockSizeRows != nil {
		in, out := &in.MinInsertBlockSizeRows, &out.MinInsertBlockSizeRows
		*out = new(int64)
		**out = **in
	}
	if in.OutputFormatJSONQuote64BitIntegers != nil {
		in, out := &in.OutputFormatJSONQuote64BitIntegers, &out.OutputFormatJSONQuote64BitIntegers
		*out = new(bool)
		**out = **in
	}
	if in.OutputFormatJSONQuoteDenormals != nil {
		in, out := &in.OutputFormatJSONQuoteDenormals, &out.OutputFormatJSONQuoteDenormals
		*out = new(bool)
		**out = **in
	}
	if in.Priority != nil {
		in, out := &in.Priority, &out.Priority
		*out = new(int64)
		**out = **in
	}
	if in.QuotaMode != nil {
		in, out := &in.QuotaMode, &out.QuotaMode
		*out = new(string)
		**out = **in
	}
	if in.ReadOverflowMode != nil {
		in, out := &in.ReadOverflowMode, &out.ReadOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.Readonly != nil {
		in, out := &in.Readonly, &out.Readonly
		*out = new(int64)
		**out = **in
	}
	if in.ReceiveTimeout != nil {
		in, out := &in.ReceiveTimeout, &out.ReceiveTimeout
		*out = new(int64)
		**out = **in
	}
	if in.ReplicationAlterPartitionsSync != nil {
		in, out := &in.ReplicationAlterPartitionsSync, &out.ReplicationAlterPartitionsSync
		*out = new(int64)
		**out = **in
	}
	if in.ResultOverflowMode != nil {
		in, out := &in.ResultOverflowMode, &out.ResultOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.SelectSequentialConsistency != nil {
		in, out := &in.SelectSequentialConsistency, &out.SelectSequentialConsistency
		*out = new(bool)
		**out = **in
	}
	if in.SendProgressInHTTPHeaders != nil {
		in, out := &in.SendProgressInHTTPHeaders, &out.SendProgressInHTTPHeaders
		*out = new(bool)
		**out = **in
	}
	if in.SendTimeout != nil {
		in, out := &in.SendTimeout, &out.SendTimeout
		*out = new(int64)
		**out = **in
	}
	if in.SetOverflowMode != nil {
		in, out := &in.SetOverflowMode, &out.SetOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.SkipUnavailableShards != nil {
		in, out := &in.SkipUnavailableShards, &out.SkipUnavailableShards
		*out = new(bool)
		**out = **in
	}
	if in.SortOverflowMode != nil {
		in, out := &in.SortOverflowMode, &out.SortOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.TimeoutOverflowMode != nil {
		in, out := &in.TimeoutOverflowMode, &out.TimeoutOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.TransferOverflowMode != nil {
		in, out := &in.TransferOverflowMode, &out.TransferOverflowMode
		*out = new(string)
		**out = **in
	}
	if in.TransformNullIn != nil {
		in, out := &in.TransformNullIn, &out.TransformNullIn
		*out = new(bool)
		**out = **in
	}
	if in.UseUncompressedCache != nil {
		in, out := &in.UseUncompressedCache, &out.UseUncompressedCache
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new UserSettingsParameters.
func (in *UserSettingsParameters) DeepCopy() *UserSettingsParameters {
	if in == nil {
		return nil
	}
	out := new(UserSettingsParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ZookeeperObservation) DeepCopyInto(out *ZookeeperObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ZookeeperObservation.
func (in *ZookeeperObservation) DeepCopy() *ZookeeperObservation {
	if in == nil {
		return nil
	}
	out := new(ZookeeperObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ZookeeperParameters) DeepCopyInto(out *ZookeeperParameters) {
	*out = *in
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = make([]ZookeeperResourcesParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ZookeeperParameters.
func (in *ZookeeperParameters) DeepCopy() *ZookeeperParameters {
	if in == nil {
		return nil
	}
	out := new(ZookeeperParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ZookeeperResourcesObservation) DeepCopyInto(out *ZookeeperResourcesObservation) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ZookeeperResourcesObservation.
func (in *ZookeeperResourcesObservation) DeepCopy() *ZookeeperResourcesObservation {
	if in == nil {
		return nil
	}
	out := new(ZookeeperResourcesObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ZookeeperResourcesParameters) DeepCopyInto(out *ZookeeperResourcesParameters) {
	*out = *in
	if in.DiskSize != nil {
		in, out := &in.DiskSize, &out.DiskSize
		*out = new(int64)
		**out = **in
	}
	if in.DiskTypeID != nil {
		in, out := &in.DiskTypeID, &out.DiskTypeID
		*out = new(string)
		**out = **in
	}
	if in.ResourcePresetID != nil {
		in, out := &in.ResourcePresetID, &out.ResourcePresetID
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ZookeeperResourcesParameters.
func (in *ZookeeperResourcesParameters) DeepCopy() *ZookeeperResourcesParameters {
	if in == nil {
		return nil
	}
	out := new(ZookeeperResourcesParameters)
	in.DeepCopyInto(out)
	return out
}
