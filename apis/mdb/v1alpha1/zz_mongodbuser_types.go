/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MongodbUserObservation struct {
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Permission []MongodbUserPermissionObservation `json:"permission,omitempty" tf:"permission,omitempty"`
}

type MongodbUserParameters struct {

	// +crossplane:generate:reference:type=MongodbCluster
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a MongodbCluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a MongodbCluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// +kubebuilder:validation:Optional
	Permission []MongodbUserPermissionParameters `json:"permission,omitempty" tf:"permission,omitempty"`
}

type MongodbUserPermissionObservation struct {
	DatabaseName *string `json:"databaseName,omitempty" tf:"database_name,omitempty"`

	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`
}

type MongodbUserPermissionParameters struct {

	// +kubebuilder:validation:Required
	DatabaseName *string `json:"databaseName" tf:"database_name,omitempty"`

	// +kubebuilder:validation:Optional
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`
}

// MongodbUserSpec defines the desired state of MongodbUser
type MongodbUserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MongodbUserParameters `json:"forProvider"`
}

// MongodbUserStatus defines the observed state of MongodbUser.
type MongodbUserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MongodbUserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MongodbUser is the Schema for the MongodbUsers API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type MongodbUser struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.passwordSecretRef)",message="passwordSecretRef is a required parameter"
	Spec   MongodbUserSpec   `json:"spec"`
	Status MongodbUserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MongodbUserList contains a list of MongodbUsers
type MongodbUserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MongodbUser `json:"items"`
}

// Repository type metadata.
var (
	MongodbUser_Kind             = "MongodbUser"
	MongodbUser_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MongodbUser_Kind}.String()
	MongodbUser_KindAPIVersion   = MongodbUser_Kind + "." + CRDGroupVersion.String()
	MongodbUser_GroupVersionKind = CRDGroupVersion.WithKind(MongodbUser_Kind)
)

func init() {
	SchemeBuilder.Register(&MongodbUser{}, &MongodbUserList{})
}
