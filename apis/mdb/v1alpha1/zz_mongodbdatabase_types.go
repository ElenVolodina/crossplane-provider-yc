/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MongodbDatabaseObservation struct {
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type MongodbDatabaseParameters struct {

	// +crossplane:generate:reference:type=MongodbCluster
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a MongodbCluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a MongodbCluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// MongodbDatabaseSpec defines the desired state of MongodbDatabase
type MongodbDatabaseSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MongodbDatabaseParameters `json:"forProvider"`
}

// MongodbDatabaseStatus defines the observed state of MongodbDatabase.
type MongodbDatabaseStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MongodbDatabaseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MongodbDatabase is the Schema for the MongodbDatabases API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloud}
type MongodbDatabase struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	Spec   MongodbDatabaseSpec   `json:"spec"`
	Status MongodbDatabaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MongodbDatabaseList contains a list of MongodbDatabases
type MongodbDatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MongodbDatabase `json:"items"`
}

// Repository type metadata.
var (
	MongodbDatabase_Kind             = "MongodbDatabase"
	MongodbDatabase_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MongodbDatabase_Kind}.String()
	MongodbDatabase_KindAPIVersion   = MongodbDatabase_Kind + "." + CRDGroupVersion.String()
	MongodbDatabase_GroupVersionKind = CRDGroupVersion.WithKind(MongodbDatabase_Kind)
)

func init() {
	SchemeBuilder.Register(&MongodbDatabase{}, &MongodbDatabaseList{})
}
