/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GreenplumClusterAccessObservation struct {
}

type GreenplumClusterAccessParameters struct {

	// +kubebuilder:validation:Optional
	DataLens *bool `json:"dataLens,omitempty" tf:"data_lens,omitempty"`

	// +kubebuilder:validation:Optional
	WebSQL *bool `json:"webSql,omitempty" tf:"web_sql,omitempty"`
}

type GreenplumClusterBackupWindowStartObservation struct {
}

type GreenplumClusterBackupWindowStartParameters struct {

	// +kubebuilder:validation:Optional
	Hours *int64 `json:"hours,omitempty" tf:"hours,omitempty"`

	// +kubebuilder:validation:Optional
	Minutes *int64 `json:"minutes,omitempty" tf:"minutes,omitempty"`
}

type GreenplumClusterObservation struct {
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	Health *string `json:"health,omitempty" tf:"health,omitempty"`

	MasterHosts []MasterHostsObservation `json:"masterHosts,omitempty" tf:"master_hosts,omitempty"`

	SegmentHosts []SegmentHostsObservation `json:"segmentHosts,omitempty" tf:"segment_hosts,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type GreenplumClusterParameters struct {

	// +kubebuilder:validation:Optional
	Access []GreenplumClusterAccessParameters `json:"access,omitempty" tf:"access,omitempty"`

	// +kubebuilder:validation:Required
	AssignPublicIP *bool `json:"assignPublicIp" tf:"assign_public_ip,omitempty"`

	// +kubebuilder:validation:Optional
	BackupWindowStart []GreenplumClusterBackupWindowStartParameters `json:"backupWindowStart,omitempty" tf:"backup_window_start,omitempty"`

	// +kubebuilder:validation:Optional
	DeletionProtection *bool `json:"deletionProtection,omitempty" tf:"deletion_protection,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Environment *string `json:"environment" tf:"environment,omitempty"`

	// +kubebuilder:validation:Optional
	FolderID *string `json:"folderId,omitempty" tf:"folder_id,omitempty"`

	// +kubebuilder:validation:Optional
	Labels map[string]*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Required
	MasterHostCount *int64 `json:"masterHostCount" tf:"master_host_count,omitempty"`

	// +kubebuilder:validation:Required
	MasterSubcluster []MasterSubclusterParameters `json:"masterSubcluster" tf:"master_subcluster,omitempty"`

	// +kubebuilder:validation:Required
	NetworkID *string `json:"networkId" tf:"network_id,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// +kubebuilder:validation:Required
	SegmentHostCount *int64 `json:"segmentHostCount" tf:"segment_host_count,omitempty"`

	// +kubebuilder:validation:Required
	SegmentInHost *int64 `json:"segmentInHost" tf:"segment_in_host,omitempty"`

	// +kubebuilder:validation:Required
	SegmentSubcluster []SegmentSubclusterParameters `json:"segmentSubcluster" tf:"segment_subcluster,omitempty"`

	// +kubebuilder:validation:Required
	SubnetID *string `json:"subnetId" tf:"subnet_id,omitempty"`

	// +kubebuilder:validation:Required
	UserName *string `json:"userName" tf:"user_name,omitempty"`

	// +kubebuilder:validation:Required
	UserPasswordSecretRef v1.SecretKeySelector `json:"userPasswordSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	Version *string `json:"version" tf:"version,omitempty"`

	// +kubebuilder:validation:Required
	Zone *string `json:"zone" tf:"zone,omitempty"`
}

type MasterHostsObservation struct {
	AssignPublicIP *bool `json:"assignPublicIp,omitempty" tf:"assign_public_ip,omitempty"`

	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`
}

type MasterHostsParameters struct {
}

type MasterSubclusterObservation struct {
}

type MasterSubclusterParameters struct {

	// +kubebuilder:validation:Required
	Resources []MasterSubclusterResourcesParameters `json:"resources" tf:"resources,omitempty"`
}

type MasterSubclusterResourcesObservation struct {
}

type MasterSubclusterResourcesParameters struct {

	// +kubebuilder:validation:Required
	DiskSize *int64 `json:"diskSize" tf:"disk_size,omitempty"`

	// +kubebuilder:validation:Required
	DiskTypeID *string `json:"diskTypeId" tf:"disk_type_id,omitempty"`

	// +kubebuilder:validation:Required
	ResourcePresetID *string `json:"resourcePresetId" tf:"resource_preset_id,omitempty"`
}

type SegmentHostsObservation struct {
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`
}

type SegmentHostsParameters struct {
}

type SegmentSubclusterObservation struct {
}

type SegmentSubclusterParameters struct {

	// +kubebuilder:validation:Required
	Resources []SegmentSubclusterResourcesParameters `json:"resources" tf:"resources,omitempty"`
}

type SegmentSubclusterResourcesObservation struct {
}

type SegmentSubclusterResourcesParameters struct {

	// +kubebuilder:validation:Required
	DiskSize *int64 `json:"diskSize" tf:"disk_size,omitempty"`

	// +kubebuilder:validation:Required
	DiskTypeID *string `json:"diskTypeId" tf:"disk_type_id,omitempty"`

	// +kubebuilder:validation:Required
	ResourcePresetID *string `json:"resourcePresetId" tf:"resource_preset_id,omitempty"`
}

// GreenplumClusterSpec defines the desired state of GreenplumCluster
type GreenplumClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GreenplumClusterParameters `json:"forProvider"`
}

// GreenplumClusterStatus defines the observed state of GreenplumCluster.
type GreenplumClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GreenplumClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GreenplumCluster is the Schema for the GreenplumClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,yandex-cloudjet}
type GreenplumCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GreenplumClusterSpec   `json:"spec"`
	Status            GreenplumClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GreenplumClusterList contains a list of GreenplumClusters
type GreenplumClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GreenplumCluster `json:"items"`
}

// Repository type metadata.
var (
	GreenplumCluster_Kind             = "GreenplumCluster"
	GreenplumCluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GreenplumCluster_Kind}.String()
	GreenplumCluster_KindAPIVersion   = GreenplumCluster_Kind + "." + CRDGroupVersion.String()
	GreenplumCluster_GroupVersionKind = CRDGroupVersion.WithKind(GreenplumCluster_Kind)
)

func init() {
	SchemeBuilder.Register(&GreenplumCluster{}, &GreenplumClusterList{})
}
